Ip   8:
	Id: 1
Ip  18:
	Id: 6
Ip  28:
	Id: 1
Ip  38:
	Id: 6
Ip  48:
	Id: 17
	Yeah, it is jump
Ip  58:
	Id: 1
Ip  68:
	Id: 7
Ip  69:
	Id: 18
Ip  70:
	Id: 1
Ip  80:
	Id: 1
Ip  90:
	Id: 2
Ip  91:
	Id: 6
Ip 101:
	Id: 1
Ip 111:
	Id: 1
Ip 121:
	Id: 4
Ip 122:
	Id: 6
Ip 132:
	Id: 1
Ip 142:
	Id: 1
Ip 152:
	Id: 14
	Yeah, it is jump
Ip 162:
	Id: 17
	Yeah, it is jump
Ip 172:
	Id: 18
Ip 173:
End of prog.

================ Begin of struct dump ==================

Command < PUSH > | Orig ip: 8 | x86 ip: 0
Checksum: 32
	+Operating width digit, value: 7

Command < POP > | Orig ip: 18 | x86 ip: 11
Checksum: 64
	+Using register, its id: 2

Command < PUSH > | Orig ip: 28 | x86 ip: 12
Checksum: 32
	+Operating width digit, value: 1

Command < POP > | Orig ip: 38 | x86 ip: 23
Checksum: 64
	+Using register, its id: 0

Command < CALL > | Orig ip: 48 | x86 ip: 24
	Yeah, it is jump
	+Wants to jump into 70

Command < PUSH > | Orig ip: 58 | x86 ip: 29
Checksum: 64
	+Using register, its id: 0

Command < OUT > | Orig ip: 68 | x86 ip: 30

Command < RET > | Orig ip: 69 | x86 ip: 60

Command < PUSH > | Orig ip: 70 | x86 ip: 61
Checksum: 64
	+Using register, its id: 2

Command < PUSH > | Orig ip: 80 | x86 ip: 62
Checksum: 64
	+Using register, its id: 0

Command < MUL > | Orig ip: 90 | x86 ip: 63

Command < POP > | Orig ip: 91 | x86 ip: 89
Checksum: 64
	+Using register, its id: 0

Command < PUSH > | Orig ip: 101 | x86 ip: 90
Checksum: 32
	+Operating width digit, value: 1

Command < PUSH > | Orig ip: 111 | x86 ip: 101
Checksum: 64
	+Using register, its id: 2

Command < SUB > | Orig ip: 121 | x86 ip: 102

Command < POP > | Orig ip: 122 | x86 ip: 128
Checksum: 64
	+Using register, its id: 2

Command < PUSH > | Orig ip: 132 | x86 ip: 129
Checksum: 32
	+Operating width digit, value: 1

Command < PUSH > | Orig ip: 142 | x86 ip: 140
Checksum: 64
	+Using register, its id: 2

Command < JE > | Orig ip: 152 | x86 ip: 141
	Yeah, it is jump
	+Wants to jump into 172

Command < CALL > | Orig ip: 162 | x86 ip: 152
	Yeah, it is jump
	+Wants to jump into 70

Command < RET > | Orig ip: 172 | x86 ip: 157

================ End of struct dump ==================



---------- Filling labels --------

	Yeah, it is jump
 4: Trying to find x86 ip for ip 70:
	 Found, x86 ip is 61
	Yeah, it is jump
18: Trying to find x86 ip for ip 172:
	 Found, x86 ip is 157
	Yeah, it is jump
19: Trying to find x86 ip for ip 70:
	 Found, x86 ip is 61


---------- End filling labels --------


================ Begin of struct dump ==================

Command < PUSH > | Orig ip: 8 | x86 ip: 0
Checksum: 32
	+Operating width digit, value: 7

Command < POP > | Orig ip: 18 | x86 ip: 11
Checksum: 64
	+Using register, its id: 2

Command < PUSH > | Orig ip: 28 | x86 ip: 12
Checksum: 32
	+Operating width digit, value: 1

Command < POP > | Orig ip: 38 | x86 ip: 23
Checksum: 64
	+Using register, its id: 0

Command < CALL > | Orig ip: 48 | x86 ip: 24
	Yeah, it is jump
	+Wants to jump into 61

Command < PUSH > | Orig ip: 58 | x86 ip: 29
Checksum: 64
	+Using register, its id: 0

Command < OUT > | Orig ip: 68 | x86 ip: 30

Command < RET > | Orig ip: 69 | x86 ip: 60

Command < PUSH > | Orig ip: 70 | x86 ip: 61
Checksum: 64
	+Using register, its id: 2

Command < PUSH > | Orig ip: 80 | x86 ip: 62
Checksum: 64
	+Using register, its id: 0

Command < MUL > | Orig ip: 90 | x86 ip: 63

Command < POP > | Orig ip: 91 | x86 ip: 89
Checksum: 64
	+Using register, its id: 0

Command < PUSH > | Orig ip: 101 | x86 ip: 90
Checksum: 32
	+Operating width digit, value: 1

Command < PUSH > | Orig ip: 111 | x86 ip: 101
Checksum: 64
	+Using register, its id: 2

Command < SUB > | Orig ip: 121 | x86 ip: 102

Command < POP > | Orig ip: 122 | x86 ip: 128
Checksum: 64
	+Using register, its id: 2

Command < PUSH > | Orig ip: 132 | x86 ip: 129
Checksum: 32
	+Operating width digit, value: 1

Command < PUSH > | Orig ip: 142 | x86 ip: 140
Checksum: 64
	+Using register, its id: 2

Command < JE > | Orig ip: 152 | x86 ip: 141
	Yeah, it is jump
	+Wants to jump into 157

Command < CALL > | Orig ip: 162 | x86 ip: 152
	Yeah, it is jump
	+Wants to jump into 61

Command < RET > | Orig ip: 172 | x86 ip: 157

================ End of struct dump ==================

---------- Begin translation -------------

##########
	 0: 49 ba 
##########

<0>:Push IMM

##########
	 0: 48 be 
##########


##########
	 0: 56 
##########

11:Push/Pop REG

##########
	 0: 5a 
##########

<12>:Push IMM

##########
	 0: 48 be 
##########


##########
	 0: 56 
##########

23:Push/Pop REG

##########
	 0: 58 
##########

Translating Jump or Call
##########
	 0: e8 
##########

29:Push/Pop REG

##########
	 0: 50 
##########

Translating OUT
##########
	 0: f2 0f 10 44 24 00 
##########


##########
	 0: 53 52 51 50 
##########


##########
	 0: 49 89 e4 
##########


##########
	 0: 48 83 e4 f0 
##########


##########
	 0: e8 
##########


##########
	 0: 4c 89 e4 
##########


##########
	 0: 58 59 5a 5b 
##########


##########
	 0: 5f 
##########

Translating RET
##########
	 0: c3 
##########

61:Push/Pop REG

##########
	 0: 52 
##########

62:Push/Pop REG

##########
	 0: 50 
##########

10: Translating math

##########
	 0: f2 0f 10 44 24 00 
##########


##########
	 0: f2 0f 10 4c 24 08 
##########


##########
	 0: 48 83 c4 08 
##########


##########
	 0: f2 0f 59 c1 
##########


##########
	 0: f2 0f 11 44 24 00 
##########

89:Push/Pop REG

##########
	 0: 58 
##########

<90>:Push IMM

##########
	 0: 48 be 
##########


##########
	 0: 56 
##########

101:Push/Pop REG

##########
	 0: 52 
##########

14: Translating math

##########
	 0: f2 0f 10 44 24 00 
##########


##########
	 0: f2 0f 10 4c 24 08 
##########


##########
	 0: 48 83 c4 08 
##########


##########
	 0: f2 0f 5c c1 
##########


##########
	 0: f2 0f 11 44 24 00 
##########

128:Push/Pop REG

##########
	 0: 5a 
##########

<129>:Push IMM

##########
	 0: 48 be 
##########


##########
	 0: 56 
##########

140:Push/Pop REG

##########
	 0: 52 
##########

18: Translating jmp

##########
	 0: 5e 
##########


##########
	 0: 5f 
##########


##########
	 0: 48 39 f7 
##########


##########
	 0: 0f 84 
##########

Translating Jump or Call
##########
	 0: e8 
##########

Translating RET
##########
	 0: c3 
##########


##########
	 0: c3 
##########



====== x86 buffer dump begin =======

 0: 49 ba 00 10 ac 00 00 00 
 8: 00 00 48 be 00 00 00 00 
16: 00 00 1c 40 56 5a 48 be 
24: 00 00 00 00 00 00 f0 3f 
32: 56 58 e8 20 00 00 00 50 
40: f2 0f 10 44 24 00 53 52 
48: 51 50 49 89 e4 48 83 e4 
56: f0 e8 2a 21 94 ff 4c 89 
64: e4 58 59 5a 5b 5f c3 52 
72: 50 f2 0f 10 44 24 00 f2 
80: 0f 10 4c 24 08 48 83 c4 
88: 08 f2 0f 59 c1 f2 0f 11 
96: 44 24 00 58 48 be 00 00 
104: 00 00 00 00 f0 3f 56 52 
112: f2 0f 10 44 24 00 f2 0f 
120: 10 4c 24 08 48 83 c4 08 
128: f2 0f 5c c1 f2 0f 11 44 
136: 24 00 5a 48 be 00 00 00 
144: 00 00 00 f0 3f 56 52 5e 
152: 5f 48 39 f7 0f 84 05 00 
160: 00 00 e8 a0 ff ff ff c3 
168: c3 00 

====== x86 buffer dump end =======

