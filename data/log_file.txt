Ip   8:
	Id: 17
	Yeah, it is jump
Ip  18:
	Id: 0
Ip  19:
	Id: 6
Ip  29:
	Id: 1
Ip  39:
	Id: 1
Ip  49:
	Id: 6
Ip  59:
	Id: 1
Ip  69:
	Id: 6
Ip  79:
	Id: 1
Ip  89:
	Id: 6
Ip  99:
	Id: 16
Ip 100:
	Id: 6
Ip 110:
	Id: 1
Ip 120:
	Id: 1
Ip 130:
	Id: 1
Ip 140:
	Id: 1
Ip 150:
	Id: 1
Ip 160:
	Id: 3
Ip 161:
	Id: 6
Ip 171:
	Id: 17
	Yeah, it is jump
Ip 181:
	Id: 1
Ip 191:
	Id: 1
Ip 201:
	Id: 4
Ip 202:
	Id: 6
Ip 212:
	Id: 6
Ip 222:
	Id: 1
Ip 232:
	Id: 7
Ip 233:
	Id: 6
Ip 243:
	Id: 1
Ip 253:
	Id: 18
Ip 254:
	Id: 6
Ip 264:
	Id: 6
Ip 274:
	Id: 6
Ip 284:
	Id: 6
Ip 294:
	Id: 1
Ip 304:
	Id: 1
Ip 314:
	Id: 1
Ip 324:
	Id: 3
Ip 325:
	Id: 6
Ip 335:
	Id: 1
Ip 345:
	Id: 1
Ip 355:
	Id: 2
Ip 356:
	Id: 6
Ip 366:
	Id: 1
Ip 376:
	Id: 6
Ip 386:
	Id: 1
Ip 396:
	Id: 1
Ip 406:
	Id: 15
	Yeah, it is jump
Ip 416:
	Id: 6
Ip 426:
	Id: 1
Ip 436:
	Id: 1
Ip 446:
	Id: 18
Ip 447:
	Id: 9
	Yeah, it is jump
Ip 457:
	Id: 1
Ip 467:
	Id: 1
Ip 477:
	Id: 1
Ip 487:
	Id: 1
Ip 497:
	Id: 1
Ip 507:
	Id: 3
Ip 508:
	Id: 6
Ip 518:
	Id: 17
	Yeah, it is jump
Ip 528:
	Id: 1
Ip 538:
	Id: 1
Ip 548:
	Id: 4
Ip 549:
	Id: 6
Ip 559:
	Id: 6
Ip 569:
	Id: 6
Ip 579:
	Id: 1
Ip 589:
	Id: 1
Ip 599:
	Id: 18
Ip 600:
End of prog.

================ Begin of struct dump ==================

Command < CALL: 17 > | Native/x86 size: 10/5 | x86 ip: 0
	Yeah, it is jump
	+Wants to jump into 19

Command < HLT: 0 > | Native/x86 size: 1/7 | x86 ip: 0

Command < POP: 6 > | Native/x86 size: 10/1 | x86 ip: 0
Checksum: 64
	+Using register, its id: 2

Command < PUSH: 1 > | Native/x86 size: 10/1 | x86 ip: 0
Checksum: 64
	+Using register, its id: 2

Command < PUSH: 1 > | Native/x86 size: 10/11 | x86 ip: 0
Checksum: 32
	+Operating width digit, value: 1

Command < POP: 6 > | Native/x86 size: 10/34 | x86 ip: 0
Checksum: 224
	+Using register, its id: 0
	+Operating width digit, value: 0
--- Adresses to memory

Command < PUSH: 1 > | Native/x86 size: 10/11 | x86 ip: 0
Checksum: 32
	+Operating width digit, value: 1

Command < POP: 6 > | Native/x86 size: 10/34 | x86 ip: 0
Checksum: 224
	+Using register, its id: 0
	+Operating width digit, value: 1
--- Adresses to memory

Command < PUSH: 1 > | Native/x86 size: 10/11 | x86 ip: 0
Checksum: 32
	+Operating width digit, value: 0

Command < POP: 6 > | Native/x86 size: 10/34 | x86 ip: 0
Checksum: 224
	+Using register, its id: 0
	+Operating width digit, value: 2
--- Adresses to memory

Command < IN: 16 > | Native/x86 size: 1/18 | x86 ip: 0

Command < POP: 6 > | Native/x86 size: 10/34 | x86 ip: 0
Checksum: 224
	+Using register, its id: 0
	+Operating width digit, value: 2
--- Adresses to memory

Command < PUSH: 1 > | Native/x86 size: 10/34 | x86 ip: 0
Checksum: 224
	+Using register, its id: 0
	+Operating width digit, value: 0
--- Adresses to memory

Command < PUSH: 1 > | Native/x86 size: 10/34 | x86 ip: 0
Checksum: 224
	+Using register, its id: 0
	+Operating width digit, value: 1
--- Adresses to memory

Command < PUSH: 1 > | Native/x86 size: 10/34 | x86 ip: 0
Checksum: 224
	+Using register, its id: 0
	+Operating width digit, value: 2
--- Adresses to memory

Command < PUSH: 1 > | Native/x86 size: 10/11 | x86 ip: 0
Checksum: 32
	+Operating width digit, value: 4

Command < PUSH: 1 > | Native/x86 size: 10/1 | x86 ip: 0
Checksum: 64
	+Using register, its id: 0

Command < ADD: 3 > | Native/x86 size: 1/26 | x86 ip: 0

Command < POP: 6 > | Native/x86 size: 10/1 | x86 ip: 0
Checksum: 64
	+Using register, its id: 0

Command < CALL: 17 > | Native/x86 size: 10/5 | x86 ip: 0
	Yeah, it is jump
	+Wants to jump into 254

Command < PUSH: 1 > | Native/x86 size: 10/11 | x86 ip: 0
Checksum: 32
	+Operating width digit, value: 4

Command < PUSH: 1 > | Native/x86 size: 10/1 | x86 ip: 0
Checksum: 64
	+Using register, its id: 0

Command < SUB: 4 > | Native/x86 size: 1/26 | x86 ip: 0

Command < POP: 6 > | Native/x86 size: 10/1 | x86 ip: 0
Checksum: 64
	+Using register, its id: 0

Command < POP: 6 > | Native/x86 size: 10/34 | x86 ip: 0
Checksum: 224
	+Using register, its id: 0
	+Operating width digit, value: 0
--- Adresses to memory

Command < PUSH: 1 > | Native/x86 size: 10/34 | x86 ip: 0
Checksum: 224
	+Using register, its id: 0
	+Operating width digit, value: 0
--- Adresses to memory

Command < OUT: 7 > | Native/x86 size: 1/41 | x86 ip: 0

Command < POP: 6 > | Native/x86 size: 10/1 | x86 ip: 0
Checksum: 64
	+Using register, its id: 2

Command < PUSH: 1 > | Native/x86 size: 10/1 | x86 ip: 0
Checksum: 64
	+Using register, its id: 2

Command < RET: 18 > | Native/x86 size: 1/1 | x86 ip: 0

Command < POP: 6 > | Native/x86 size: 10/1 | x86 ip: 0
Checksum: 64
	+Using register, its id: 2

Command < POP: 6 > | Native/x86 size: 10/34 | x86 ip: 0
Checksum: 224
	+Using register, its id: 0
	+Operating width digit, value: 0
--- Adresses to memory

Command < POP: 6 > | Native/x86 size: 10/34 | x86 ip: 0
Checksum: 224
	+Using register, its id: 0
	+Operating width digit, value: 1
--- Adresses to memory

Command < POP: 6 > | Native/x86 size: 10/34 | x86 ip: 0
Checksum: 224
	+Using register, its id: 0
	+Operating width digit, value: 2
--- Adresses to memory

Command < PUSH: 1 > | Native/x86 size: 10/1 | x86 ip: 0
Checksum: 64
	+Using register, its id: 2

Command < PUSH: 1 > | Native/x86 size: 10/34 | x86 ip: 0
Checksum: 224
	+Using register, its id: 0
	+Operating width digit, value: 1
--- Adresses to memory

Command < PUSH: 1 > | Native/x86 size: 10/11 | x86 ip: 0
Checksum: 32
	+Operating width digit, value: 1

Command < ADD: 3 > | Native/x86 size: 1/26 | x86 ip: 0

Command < POP: 6 > | Native/x86 size: 10/34 | x86 ip: 0
Checksum: 224
	+Using register, its id: 0
	+Operating width digit, value: 1
--- Adresses to memory

Command < PUSH: 1 > | Native/x86 size: 10/34 | x86 ip: 0
Checksum: 224
	+Using register, its id: 0
	+Operating width digit, value: 2
--- Adresses to memory

Command < PUSH: 1 > | Native/x86 size: 10/34 | x86 ip: 0
Checksum: 224
	+Using register, its id: 0
	+Operating width digit, value: 1
--- Adresses to memory

Command < MUL: 2 > | Native/x86 size: 1/26 | x86 ip: 0

Command < POP: 6 > | Native/x86 size: 10/34 | x86 ip: 0
Checksum: 224
	+Using register, its id: 0
	+Operating width digit, value: 2
--- Adresses to memory

Command < PUSH: 1 > | Native/x86 size: 10/11 | x86 ip: 0
Checksum: 32
	+Operating width digit, value: 123

Command < POP: 6 > | Native/x86 size: 10/34 | x86 ip: 0
Checksum: 224
	+Using register, its id: 0
	+Operating width digit, value: 3
--- Adresses to memory

Command < PUSH: 1 > | Native/x86 size: 10/34 | x86 ip: 0
Checksum: 224
	+Using register, its id: 0
	+Operating width digit, value: 1
--- Adresses to memory

Command < PUSH: 1 > | Native/x86 size: 10/34 | x86 ip: 0
Checksum: 224
	+Using register, its id: 0
	+Operating width digit, value: 0
--- Adresses to memory

Command < JNE: 15 > | Native/x86 size: 10/26 | x86 ip: 0
	Yeah, it is jump
	+Wants to jump into 457

Command < POP: 6 > | Native/x86 size: 10/1 | x86 ip: 0
Checksum: 64
	+Using register, its id: 2

Command < PUSH: 1 > | Native/x86 size: 10/34 | x86 ip: 0
Checksum: 224
	+Using register, its id: 0
	+Operating width digit, value: 2
--- Adresses to memory

Command < PUSH: 1 > | Native/x86 size: 10/1 | x86 ip: 0
Checksum: 64
	+Using register, its id: 2

Command < RET: 18 > | Native/x86 size: 1/1 | x86 ip: 0

Command < JMP: 9 > | Native/x86 size: 10/5 | x86 ip: 0
	Yeah, it is jump
	+Wants to jump into 569

Command < PUSH: 1 > | Native/x86 size: 10/34 | x86 ip: 0
Checksum: 224
	+Using register, its id: 0
	+Operating width digit, value: 2
--- Adresses to memory

Command < PUSH: 1 > | Native/x86 size: 10/34 | x86 ip: 0
Checksum: 224
	+Using register, its id: 0
	+Operating width digit, value: 1
--- Adresses to memory

Command < PUSH: 1 > | Native/x86 size: 10/34 | x86 ip: 0
Checksum: 224
	+Using register, its id: 0
	+Operating width digit, value: 0
--- Adresses to memory

Command < PUSH: 1 > | Native/x86 size: 10/11 | x86 ip: 0
Checksum: 32
	+Operating width digit, value: 5

Command < PUSH: 1 > | Native/x86 size: 10/1 | x86 ip: 0
Checksum: 64
	+Using register, its id: 0

Command < ADD: 3 > | Native/x86 size: 1/26 | x86 ip: 0

Command < POP: 6 > | Native/x86 size: 10/1 | x86 ip: 0
Checksum: 64
	+Using register, its id: 0

Command < CALL: 17 > | Native/x86 size: 10/5 | x86 ip: 0
	Yeah, it is jump
	+Wants to jump into 254

Command < PUSH: 1 > | Native/x86 size: 10/11 | x86 ip: 0
Checksum: 32
	+Operating width digit, value: 5

Command < PUSH: 1 > | Native/x86 size: 10/1 | x86 ip: 0
Checksum: 64
	+Using register, its id: 0

Command < SUB: 4 > | Native/x86 size: 1/26 | x86 ip: 0

Command < POP: 6 > | Native/x86 size: 10/1 | x86 ip: 0
Checksum: 64
	+Using register, its id: 0

Command < POP: 6 > | Native/x86 size: 10/34 | x86 ip: 0
Checksum: 224
	+Using register, its id: 0
	+Operating width digit, value: 2
--- Adresses to memory

Command < POP: 6 > | Native/x86 size: 10/1 | x86 ip: 0
Checksum: 64
	+Using register, its id: 2

Command < PUSH: 1 > | Native/x86 size: 10/34 | x86 ip: 0
Checksum: 224
	+Using register, its id: 0
	+Operating width digit, value: 2
--- Adresses to memory

Command < PUSH: 1 > | Native/x86 size: 10/1 | x86 ip: 0
Checksum: 64
	+Using register, its id: 2

Command < RET: 18 > | Native/x86 size: 1/1 | x86 ip: 0

================ End of struct dump ==================

Optimization attempt: mov r?x, num
Optimization attempt: mov r?x, num
Optimization attempt: mov r?x, num
Optimization attempt: mov r?x, num
Optimization attempt: constant arithmetics
Optimization attempt: mov r?x, num
Optimization attempt: constant arithmetics
Optimization attempt: mov r?x, num
Optimization attempt: constant arithmetics
Optimization attempt: constant arithmetics
Optimization attempt: mov r?x, num
Optimization attempt: mov r?x, num
Optimization attempt: constant arithmetics
Optimization attempt: mov r?x, num
Optimization attempt: constant arithmetics


---------- Filling labels --------

	Yeah, it is jump
 0: Trying to find x86 ip for ip 19:
	 Found, x86 ip is 12
	Yeah, it is jump
19: Trying to find x86 ip for ip 254:
	 Found, x86 ip is 498
	Yeah, it is jump
47: Trying to find x86 ip for ip 457:
	 Found, x86 ip is 1016
	Yeah, it is jump
52: Trying to find x86 ip for ip 569:
	 Found, x86 ip is 1235
	Yeah, it is jump
60: Trying to find x86 ip for ip 254:
	 Found, x86 ip is 498


---------- End filling labels --------


================ Begin of struct dump ==================

Command < CALL: 17 > | Native/x86 size: 10/5 | x86 ip: 0
	Yeah, it is jump
	+Wants to jump into 12

Command < HLT: 0 > | Native/x86 size: 1/7 | x86 ip: 5

Command < POP: 6 > | Native/x86 size: 10/1 | x86 ip: 12
Checksum: 64
	+Using register, its id: 2

Command < PUSH: 1 > | Native/x86 size: 10/1 | x86 ip: 13
Checksum: 64
	+Using register, its id: 2

Command < PUSH: 1 > | Native/x86 size: 10/11 | x86 ip: 14
Checksum: 32
	+Operating width digit, value: 1

Command < POP: 6 > | Native/x86 size: 10/34 | x86 ip: 25
Checksum: 224
	+Using register, its id: 0
	+Operating width digit, value: 0
--- Adresses to memory

Command < PUSH: 1 > | Native/x86 size: 10/11 | x86 ip: 59
Checksum: 32
	+Operating width digit, value: 1

Command < POP: 6 > | Native/x86 size: 10/34 | x86 ip: 70
Checksum: 224
	+Using register, its id: 0
	+Operating width digit, value: 1
--- Adresses to memory

Command < PUSH: 1 > | Native/x86 size: 10/11 | x86 ip: 104
Checksum: 32
	+Operating width digit, value: 0

Command < POP: 6 > | Native/x86 size: 10/34 | x86 ip: 115
Checksum: 224
	+Using register, its id: 0
	+Operating width digit, value: 2
--- Adresses to memory

Command < IN: 16 > | Native/x86 size: 1/18 | x86 ip: 149

Command < POP: 6 > | Native/x86 size: 10/34 | x86 ip: 167
Checksum: 224
	+Using register, its id: 0
	+Operating width digit, value: 2
--- Adresses to memory

Command < PUSH: 1 > | Native/x86 size: 10/34 | x86 ip: 201
Checksum: 224
	+Using register, its id: 0
	+Operating width digit, value: 0
--- Adresses to memory

Command < PUSH: 1 > | Native/x86 size: 10/34 | x86 ip: 235
Checksum: 224
	+Using register, its id: 0
	+Operating width digit, value: 1
--- Adresses to memory

Command < PUSH: 1 > | Native/x86 size: 10/34 | x86 ip: 269
Checksum: 224
	+Using register, its id: 0
	+Operating width digit, value: 2
--- Adresses to memory

Command < PUSH: 1 > | Native/x86 size: 10/11 | x86 ip: 303
Checksum: 32
	+Operating width digit, value: 4

Command < PUSH: 1 > | Native/x86 size: 10/1 | x86 ip: 314
Checksum: 64
	+Using register, its id: 0

Command < ADD: 3 > | Native/x86 size: 1/26 | x86 ip: 315

Command < POP: 6 > | Native/x86 size: 10/1 | x86 ip: 341
Checksum: 64
	+Using register, its id: 0

Command < CALL: 17 > | Native/x86 size: 10/5 | x86 ip: 342
	Yeah, it is jump
	+Wants to jump into 498

Command < PUSH: 1 > | Native/x86 size: 10/11 | x86 ip: 347
Checksum: 32
	+Operating width digit, value: 4

Command < PUSH: 1 > | Native/x86 size: 10/1 | x86 ip: 358
Checksum: 64
	+Using register, its id: 0

Command < SUB: 4 > | Native/x86 size: 1/26 | x86 ip: 359

Command < POP: 6 > | Native/x86 size: 10/1 | x86 ip: 385
Checksum: 64
	+Using register, its id: 0

Command < POP: 6 > | Native/x86 size: 10/34 | x86 ip: 386
Checksum: 224
	+Using register, its id: 0
	+Operating width digit, value: 0
--- Adresses to memory

Command < PUSH: 1 > | Native/x86 size: 10/34 | x86 ip: 420
Checksum: 224
	+Using register, its id: 0
	+Operating width digit, value: 0
--- Adresses to memory

Command < OUT: 7 > | Native/x86 size: 1/41 | x86 ip: 454

Command < POP: 6 > | Native/x86 size: 10/1 | x86 ip: 495
Checksum: 64
	+Using register, its id: 2

Command < PUSH: 1 > | Native/x86 size: 10/1 | x86 ip: 496
Checksum: 64
	+Using register, its id: 2

Command < RET: 18 > | Native/x86 size: 1/1 | x86 ip: 497

Command < POP: 6 > | Native/x86 size: 10/1 | x86 ip: 498
Checksum: 64
	+Using register, its id: 2

Command < POP: 6 > | Native/x86 size: 10/34 | x86 ip: 499
Checksum: 224
	+Using register, its id: 0
	+Operating width digit, value: 0
--- Adresses to memory

Command < POP: 6 > | Native/x86 size: 10/34 | x86 ip: 533
Checksum: 224
	+Using register, its id: 0
	+Operating width digit, value: 1
--- Adresses to memory

Command < POP: 6 > | Native/x86 size: 10/34 | x86 ip: 567
Checksum: 224
	+Using register, its id: 0
	+Operating width digit, value: 2
--- Adresses to memory

Command < PUSH: 1 > | Native/x86 size: 10/1 | x86 ip: 601
Checksum: 64
	+Using register, its id: 2

Command < PUSH: 1 > | Native/x86 size: 10/34 | x86 ip: 602
Checksum: 224
	+Using register, its id: 0
	+Operating width digit, value: 1
--- Adresses to memory

Command < PUSH: 1 > | Native/x86 size: 10/11 | x86 ip: 636
Checksum: 32
	+Operating width digit, value: 1

Command < ADD: 3 > | Native/x86 size: 1/26 | x86 ip: 647

Command < POP: 6 > | Native/x86 size: 10/34 | x86 ip: 673
Checksum: 224
	+Using register, its id: 0
	+Operating width digit, value: 1
--- Adresses to memory

Command < PUSH: 1 > | Native/x86 size: 10/34 | x86 ip: 707
Checksum: 224
	+Using register, its id: 0
	+Operating width digit, value: 2
--- Adresses to memory

Command < PUSH: 1 > | Native/x86 size: 10/34 | x86 ip: 741
Checksum: 224
	+Using register, its id: 0
	+Operating width digit, value: 1
--- Adresses to memory

Command < MUL: 2 > | Native/x86 size: 1/26 | x86 ip: 775

Command < POP: 6 > | Native/x86 size: 10/34 | x86 ip: 801
Checksum: 224
	+Using register, its id: 0
	+Operating width digit, value: 2
--- Adresses to memory

Command < PUSH: 1 > | Native/x86 size: 10/11 | x86 ip: 835
Checksum: 32
	+Operating width digit, value: 123

Command < POP: 6 > | Native/x86 size: 10/34 | x86 ip: 846
Checksum: 224
	+Using register, its id: 0
	+Operating width digit, value: 3
--- Adresses to memory

Command < PUSH: 1 > | Native/x86 size: 10/34 | x86 ip: 880
Checksum: 224
	+Using register, its id: 0
	+Operating width digit, value: 1
--- Adresses to memory

Command < PUSH: 1 > | Native/x86 size: 10/34 | x86 ip: 914
Checksum: 224
	+Using register, its id: 0
	+Operating width digit, value: 0
--- Adresses to memory

Command < JNE: 15 > | Native/x86 size: 10/26 | x86 ip: 948
	Yeah, it is jump
	+Wants to jump into 1016

Command < POP: 6 > | Native/x86 size: 10/1 | x86 ip: 974
Checksum: 64
	+Using register, its id: 2

Command < PUSH: 1 > | Native/x86 size: 10/34 | x86 ip: 975
Checksum: 224
	+Using register, its id: 0
	+Operating width digit, value: 2
--- Adresses to memory

Command < PUSH: 1 > | Native/x86 size: 10/1 | x86 ip: 1009
Checksum: 64
	+Using register, its id: 2

Command < RET: 18 > | Native/x86 size: 1/1 | x86 ip: 1010

Command < JMP: 9 > | Native/x86 size: 10/5 | x86 ip: 1011
	Yeah, it is jump
	+Wants to jump into 1235

Command < PUSH: 1 > | Native/x86 size: 10/34 | x86 ip: 1016
Checksum: 224
	+Using register, its id: 0
	+Operating width digit, value: 2
--- Adresses to memory

Command < PUSH: 1 > | Native/x86 size: 10/34 | x86 ip: 1050
Checksum: 224
	+Using register, its id: 0
	+Operating width digit, value: 1
--- Adresses to memory

Command < PUSH: 1 > | Native/x86 size: 10/34 | x86 ip: 1084
Checksum: 224
	+Using register, its id: 0
	+Operating width digit, value: 0
--- Adresses to memory

Command < PUSH: 1 > | Native/x86 size: 10/11 | x86 ip: 1118
Checksum: 32
	+Operating width digit, value: 5

Command < PUSH: 1 > | Native/x86 size: 10/1 | x86 ip: 1129
Checksum: 64
	+Using register, its id: 0

Command < ADD: 3 > | Native/x86 size: 1/26 | x86 ip: 1130

Command < POP: 6 > | Native/x86 size: 10/1 | x86 ip: 1156
Checksum: 64
	+Using register, its id: 0

Command < CALL: 17 > | Native/x86 size: 10/5 | x86 ip: 1157
	Yeah, it is jump
	+Wants to jump into 498

Command < PUSH: 1 > | Native/x86 size: 10/11 | x86 ip: 1162
Checksum: 32
	+Operating width digit, value: 5

Command < PUSH: 1 > | Native/x86 size: 10/1 | x86 ip: 1173
Checksum: 64
	+Using register, its id: 0

Command < SUB: 4 > | Native/x86 size: 1/26 | x86 ip: 1174

Command < POP: 6 > | Native/x86 size: 10/1 | x86 ip: 1200
Checksum: 64
	+Using register, its id: 0

Command < POP: 6 > | Native/x86 size: 10/34 | x86 ip: 1201
Checksum: 224
	+Using register, its id: 0
	+Operating width digit, value: 2
--- Adresses to memory

Command < POP: 6 > | Native/x86 size: 10/1 | x86 ip: 1235
Checksum: 64
	+Using register, its id: 2

Command < PUSH: 1 > | Native/x86 size: 10/34 | x86 ip: 1236
Checksum: 224
	+Using register, its id: 0
	+Operating width digit, value: 2
--- Adresses to memory

Command < PUSH: 1 > | Native/x86 size: 10/1 | x86 ip: 1270
Checksum: 64
	+Using register, its id: 2

Command < RET: 18 > | Native/x86 size: 1/1 | x86 ip: 1271

================ End of struct dump ==================

---------- Begin translation -------------

##########
	 0: 49 ba 
##########

Translating Jump or Call
##########
	 0: e8 
##########

Translating exit()

##########
	 0: 6a 3c 58 31 ff 0f 05 
##########

12:Push/Pop REG

##########
	 0: 5a 
##########

13:Push/Pop REG

##########
	 0: 52 
##########

<14>:Push IMM

##########
	 0: 48 be 
##########


##########
	 0: 56 
##########

Translating push ram

##########
	 0: 50 
##########


##########
	 0: f2 0f 10 44 24 00 
##########


##########
	 0: 48 83 c4 08 
##########


##########
	 0: f2 48 0f 2d f0 
##########


##########
	 0: 48 c1 e6 03 
##########


##########
	 0: 49 01 f2 
##########


##########
	 0: 5f 
##########


##########
	 0: 49 89 ba 
##########


##########
	 0: 49 29 f2 
##########

<59>:Push IMM

##########
	 0: 48 be 
##########


##########
	 0: 56 
##########

Translating push ram

##########
	 0: 50 
##########


##########
	 0: f2 0f 10 44 24 00 
##########


##########
	 0: 48 83 c4 08 
##########


##########
	 0: f2 48 0f 2d f0 
##########


##########
	 0: 48 c1 e6 03 
##########


##########
	 0: 49 01 f2 
##########


##########
	 0: 5f 
##########


##########
	 0: 49 89 ba 
##########


##########
	 0: 49 29 f2 
##########

<104>:Push IMM

##########
	 0: 48 be 
##########


##########
	 0: 56 
##########

Translating push ram

##########
	 0: 50 
##########


##########
	 0: f2 0f 10 44 24 00 
##########


##########
	 0: 48 83 c4 08 
##########


##########
	 0: f2 48 0f 2d f0 
##########


##########
	 0: 48 c1 e6 03 
##########


##########
	 0: 49 01 f2 
##########


##########
	 0: 5f 
##########


##########
	 0: 49 89 ba 
##########


##########
	 0: 49 29 f2 
##########

Translating IN
##########
	 0: 41 52 53 52 51 50 
##########


##########
	 0: e8 
##########


##########
	 0: 58 59 5a 5b 41 5a 
##########


##########
	 0: 56 
##########

Translating push ram

##########
	 0: 50 
##########


##########
	 0: f2 0f 10 44 24 00 
##########


##########
	 0: 48 83 c4 08 
##########


##########
	 0: f2 48 0f 2d f0 
##########


##########
	 0: 48 c1 e6 03 
##########


##########
	 0: 49 01 f2 
##########


##########
	 0: 5f 
##########


##########
	 0: 49 89 ba 
##########


##########
	 0: 49 29 f2 
##########

Translating push ram

##########
	 0: 50 
##########


##########
	 0: f2 0f 10 44 24 00 
##########


##########
	 0: 48 83 c4 08 
##########


##########
	 0: f2 48 0f 2d f0 
##########


##########
	 0: 48 c1 e6 03 
##########


##########
	 0: 49 01 f2 
##########


##########
	 0: 49 8b ba 
##########


##########
	 0: 57 
##########


##########
	 0: 49 29 f2 
##########

Translating push ram

##########
	 0: 50 
##########


##########
	 0: f2 0f 10 44 24 00 
##########


##########
	 0: 48 83 c4 08 
##########


##########
	 0: f2 48 0f 2d f0 
##########


##########
	 0: 48 c1 e6 03 
##########


##########
	 0: 49 01 f2 
##########


##########
	 0: 49 8b ba 
##########


##########
	 0: 57 
##########


##########
	 0: 49 29 f2 
##########

Translating push ram

##########
	 0: 50 
##########


##########
	 0: f2 0f 10 44 24 00 
##########


##########
	 0: 48 83 c4 08 
##########


##########
	 0: f2 48 0f 2d f0 
##########


##########
	 0: 48 c1 e6 03 
##########


##########
	 0: 49 01 f2 
##########


##########
	 0: 49 8b ba 
##########


##########
	 0: 57 
##########


##########
	 0: 49 29 f2 
##########

<303>:Push IMM

##########
	 0: 48 be 
##########


##########
	 0: 56 
##########

314:Push/Pop REG

##########
	 0: 50 
##########

17: Translating math

##########
	 0: f2 0f 10 44 24 00 
##########


##########
	 0: f2 0f 10 4c 24 08 
##########


##########
	 0: 48 83 c4 08 
##########


##########
	 0: f2 0f 58 c1 
##########


##########
	 0: f2 0f 11 44 24 00 
##########

341:Push/Pop REG

##########
	 0: 58 
##########

Translating Jump or Call
##########
	 0: e8 
##########

<347>:Push IMM

##########
	 0: 48 be 
##########


##########
	 0: 56 
##########

358:Push/Pop REG

##########
	 0: 50 
##########

22: Translating math

##########
	 0: f2 0f 10 44 24 00 
##########


##########
	 0: f2 0f 10 4c 24 08 
##########


##########
	 0: 48 83 c4 08 
##########


##########
	 0: f2 0f 5c c1 
##########


##########
	 0: f2 0f 11 44 24 00 
##########

385:Push/Pop REG

##########
	 0: 58 
##########

Translating push ram

##########
	 0: 50 
##########


##########
	 0: f2 0f 10 44 24 00 
##########


##########
	 0: 48 83 c4 08 
##########


##########
	 0: f2 48 0f 2d f0 
##########


##########
	 0: 48 c1 e6 03 
##########


##########
	 0: 49 01 f2 
##########


##########
	 0: 5f 
##########


##########
	 0: 49 89 ba 
##########


##########
	 0: 49 29 f2 
##########

Translating push ram

##########
	 0: 50 
##########


##########
	 0: f2 0f 10 44 24 00 
##########


##########
	 0: 48 83 c4 08 
##########


##########
	 0: f2 48 0f 2d f0 
##########


##########
	 0: 48 c1 e6 03 
##########


##########
	 0: 49 01 f2 
##########


##########
	 0: 49 8b ba 
##########


##########
	 0: 57 
##########


##########
	 0: 49 29 f2 
##########

Translating OUT
##########
	 0: f2 0f 10 44 24 00 
##########


##########
	 0: f2 48 0f 2d f0 
##########


##########
	 0: 56 
##########


##########
	 0: 58 
##########


##########
	 0: 41 52 53 52 51 50 
##########


##########
	 0: 49 89 e4 
##########


##########
	 0: 48 83 e4 f0 
##########


##########
	 0: e8 
##########


##########
	 0: 4c 89 e4 
##########


##########
	 0: 58 59 5a 5b 41 5a 
##########


##########
	 0: 5f 
##########

495:Push/Pop REG

##########
	 0: 5a 
##########

496:Push/Pop REG

##########
	 0: 52 
##########

Translating RET
##########
	 0: c3 
##########

498:Push/Pop REG

##########
	 0: 5a 
##########

Translating push ram

##########
	 0: 50 
##########


##########
	 0: f2 0f 10 44 24 00 
##########


##########
	 0: 48 83 c4 08 
##########


##########
	 0: f2 48 0f 2d f0 
##########


##########
	 0: 48 c1 e6 03 
##########


##########
	 0: 49 01 f2 
##########


##########
	 0: 5f 
##########


##########
	 0: 49 89 ba 
##########


##########
	 0: 49 29 f2 
##########

Translating push ram

##########
	 0: 50 
##########


##########
	 0: f2 0f 10 44 24 00 
##########


##########
	 0: 48 83 c4 08 
##########


##########
	 0: f2 48 0f 2d f0 
##########


##########
	 0: 48 c1 e6 03 
##########


##########
	 0: 49 01 f2 
##########


##########
	 0: 5f 
##########


##########
	 0: 49 89 ba 
##########


##########
	 0: 49 29 f2 
##########

Translating push ram

##########
	 0: 50 
##########


##########
	 0: f2 0f 10 44 24 00 
##########


##########
	 0: 48 83 c4 08 
##########


##########
	 0: f2 48 0f 2d f0 
##########


##########
	 0: 48 c1 e6 03 
##########


##########
	 0: 49 01 f2 
##########


##########
	 0: 5f 
##########


##########
	 0: 49 89 ba 
##########


##########
	 0: 49 29 f2 
##########

601:Push/Pop REG

##########
	 0: 52 
##########

Translating push ram

##########
	 0: 50 
##########


##########
	 0: f2 0f 10 44 24 00 
##########


##########
	 0: 48 83 c4 08 
##########


##########
	 0: f2 48 0f 2d f0 
##########


##########
	 0: 48 c1 e6 03 
##########


##########
	 0: 49 01 f2 
##########


##########
	 0: 49 8b ba 
##########


##########
	 0: 57 
##########


##########
	 0: 49 29 f2 
##########

<636>:Push IMM

##########
	 0: 48 be 
##########


##########
	 0: 56 
##########

37: Translating math

##########
	 0: f2 0f 10 44 24 00 
##########


##########
	 0: f2 0f 10 4c 24 08 
##########


##########
	 0: 48 83 c4 08 
##########


##########
	 0: f2 0f 58 c1 
##########


##########
	 0: f2 0f 11 44 24 00 
##########

Translating push ram

##########
	 0: 50 
##########


##########
	 0: f2 0f 10 44 24 00 
##########


##########
	 0: 48 83 c4 08 
##########


##########
	 0: f2 48 0f 2d f0 
##########


##########
	 0: 48 c1 e6 03 
##########


##########
	 0: 49 01 f2 
##########


##########
	 0: 5f 
##########


##########
	 0: 49 89 ba 
##########


##########
	 0: 49 29 f2 
##########

Translating push ram

##########
	 0: 50 
##########


##########
	 0: f2 0f 10 44 24 00 
##########


##########
	 0: 48 83 c4 08 
##########


##########
	 0: f2 48 0f 2d f0 
##########


##########
	 0: 48 c1 e6 03 
##########


##########
	 0: 49 01 f2 
##########


##########
	 0: 49 8b ba 
##########


##########
	 0: 57 
##########


##########
	 0: 49 29 f2 
##########

Translating push ram

##########
	 0: 50 
##########


##########
	 0: f2 0f 10 44 24 00 
##########


##########
	 0: 48 83 c4 08 
##########


##########
	 0: f2 48 0f 2d f0 
##########


##########
	 0: 48 c1 e6 03 
##########


##########
	 0: 49 01 f2 
##########


##########
	 0: 49 8b ba 
##########


##########
	 0: 57 
##########


##########
	 0: 49 29 f2 
##########

41: Translating math

##########
	 0: f2 0f 10 44 24 00 
##########


##########
	 0: f2 0f 10 4c 24 08 
##########


##########
	 0: 48 83 c4 08 
##########


##########
	 0: f2 0f 59 c1 
##########


##########
	 0: f2 0f 11 44 24 00 
##########

Translating push ram

##########
	 0: 50 
##########


##########
	 0: f2 0f 10 44 24 00 
##########


##########
	 0: 48 83 c4 08 
##########


##########
	 0: f2 48 0f 2d f0 
##########


##########
	 0: 48 c1 e6 03 
##########


##########
	 0: 49 01 f2 
##########


##########
	 0: 5f 
##########


##########
	 0: 49 89 ba 
##########


##########
	 0: 49 29 f2 
##########

<835>:Push IMM

##########
	 0: 48 be 
##########


##########
	 0: 56 
##########

Translating push ram

##########
	 0: 50 
##########


##########
	 0: f2 0f 10 44 24 00 
##########


##########
	 0: 48 83 c4 08 
##########


##########
	 0: f2 48 0f 2d f0 
##########


##########
	 0: 48 c1 e6 03 
##########


##########
	 0: 49 01 f2 
##########


##########
	 0: 5f 
##########


##########
	 0: 49 89 ba 
##########


##########
	 0: 49 29 f2 
##########

Translating push ram

##########
	 0: 50 
##########


##########
	 0: f2 0f 10 44 24 00 
##########


##########
	 0: 48 83 c4 08 
##########


##########
	 0: f2 48 0f 2d f0 
##########


##########
	 0: 48 c1 e6 03 
##########


##########
	 0: 49 01 f2 
##########


##########
	 0: 49 8b ba 
##########


##########
	 0: 57 
##########


##########
	 0: 49 29 f2 
##########

Translating push ram

##########
	 0: 50 
##########


##########
	 0: f2 0f 10 44 24 00 
##########


##########
	 0: 48 83 c4 08 
##########


##########
	 0: f2 48 0f 2d f0 
##########


##########
	 0: 48 c1 e6 03 
##########


##########
	 0: 49 01 f2 
##########


##########
	 0: 49 8b ba 
##########


##########
	 0: 57 
##########


##########
	 0: 49 29 f2 
##########

47: Translating jmp

##########
	 0: f2 0f 10 44 24 00 
##########


##########
	 0: f2 0f 10 4c 24 08 
##########


##########
	 0: 48 83 c4 10 
##########


##########
	 0: 66 0f 2e c1 
##########


##########
	 0: 0f 85 
##########

974:Push/Pop REG

##########
	 0: 5a 
##########

Translating push ram

##########
	 0: 50 
##########


##########
	 0: f2 0f 10 44 24 00 
##########


##########
	 0: 48 83 c4 08 
##########


##########
	 0: f2 48 0f 2d f0 
##########


##########
	 0: 48 c1 e6 03 
##########


##########
	 0: 49 01 f2 
##########


##########
	 0: 49 8b ba 
##########


##########
	 0: 57 
##########


##########
	 0: 49 29 f2 
##########

1009:Push/Pop REG

##########
	 0: 52 
##########

Translating RET
##########
	 0: c3 
##########

Translating Jump or Call
##########
	 0: e9 
##########

Translating push ram

##########
	 0: 50 
##########


##########
	 0: f2 0f 10 44 24 00 
##########


##########
	 0: 48 83 c4 08 
##########


##########
	 0: f2 48 0f 2d f0 
##########


##########
	 0: 48 c1 e6 03 
##########


##########
	 0: 49 01 f2 
##########


##########
	 0: 49 8b ba 
##########


##########
	 0: 57 
##########


##########
	 0: 49 29 f2 
##########

Translating push ram

##########
	 0: 50 
##########


##########
	 0: f2 0f 10 44 24 00 
##########


##########
	 0: 48 83 c4 08 
##########


##########
	 0: f2 48 0f 2d f0 
##########


##########
	 0: 48 c1 e6 03 
##########


##########
	 0: 49 01 f2 
##########


##########
	 0: 49 8b ba 
##########


##########
	 0: 57 
##########


##########
	 0: 49 29 f2 
##########

Translating push ram

##########
	 0: 50 
##########


##########
	 0: f2 0f 10 44 24 00 
##########


##########
	 0: 48 83 c4 08 
##########


##########
	 0: f2 48 0f 2d f0 
##########


##########
	 0: 48 c1 e6 03 
##########


##########
	 0: 49 01 f2 
##########


##########
	 0: 49 8b ba 
##########


##########
	 0: 57 
##########


##########
	 0: 49 29 f2 
##########

<1118>:Push IMM

##########
	 0: 48 be 
##########


##########
	 0: 56 
##########

1129:Push/Pop REG

##########
	 0: 50 
##########

58: Translating math

##########
	 0: f2 0f 10 44 24 00 
##########


##########
	 0: f2 0f 10 4c 24 08 
##########


##########
	 0: 48 83 c4 08 
##########


##########
	 0: f2 0f 58 c1 
##########


##########
	 0: f2 0f 11 44 24 00 
##########

1156:Push/Pop REG

##########
	 0: 58 
##########

Translating Jump or Call
##########
	 0: e8 
##########

<1162>:Push IMM

##########
	 0: 48 be 
##########


##########
	 0: 56 
##########

1173:Push/Pop REG

##########
	 0: 50 
##########

63: Translating math

##########
	 0: f2 0f 10 44 24 00 
##########


##########
	 0: f2 0f 10 4c 24 08 
##########


##########
	 0: 48 83 c4 08 
##########


##########
	 0: f2 0f 5c c1 
##########


##########
	 0: f2 0f 11 44 24 00 
##########

1200:Push/Pop REG

##########
	 0: 58 
##########

Translating push ram

##########
	 0: 50 
##########


##########
	 0: f2 0f 10 44 24 00 
##########


##########
	 0: 48 83 c4 08 
##########


##########
	 0: f2 48 0f 2d f0 
##########


##########
	 0: 48 c1 e6 03 
##########


##########
	 0: 49 01 f2 
##########


##########
	 0: 5f 
##########


##########
	 0: 49 89 ba 
##########


##########
	 0: 49 29 f2 
##########

1235:Push/Pop REG

##########
	 0: 5a 
##########

Translating push ram

##########
	 0: 50 
##########


##########
	 0: f2 0f 10 44 24 00 
##########


##########
	 0: 48 83 c4 08 
##########


##########
	 0: f2 48 0f 2d f0 
##########


##########
	 0: 48 c1 e6 03 
##########


##########
	 0: 49 01 f2 
##########


##########
	 0: 49 8b ba 
##########


##########
	 0: 57 
##########


##########
	 0: 49 29 f2 
##########

1270:Push/Pop REG

##########
	 0: 52 
##########

Translating RET
##########
	 0: c3 
##########



====== x86 buffer dump begin =======

 0: 49 ba e8 17 40 00 00 00 
 8: 00 00 e8 07 00 00 00 6a 
16: 3c 58 31 ff 0f 05 5a 52 
24: 48 be 00 00 00 00 00 00 
32: f0 3f 56 50 f2 0f 10 44 
40: 24 00 48 83 c4 08 f2 48 
48: 0f 2d f0 48 c1 e6 03 49 
56: 01 f2 5f 49 89 ba 00 00 
64: 00 00 49 29 f2 48 be 00 
72: 00 00 00 00 00 f0 3f 56 
80: 50 f2 0f 10 44 24 00 48 
88: 83 c4 08 f2 48 0f 2d f0 
96: 48 c1 e6 03 49 01 f2 5f 
104: 49 89 ba 08 00 00 00 49 
112: 29 f2 48 be 00 00 00 00 
120: 00 00 00 00 56 50 f2 0f 
128: 10 44 24 00 48 83 c4 08 
136: f2 48 0f 2d f0 48 c1 e6 
144: 03 49 01 f2 5f 49 89 ba 
152: 10 00 00 00 49 29 f2 41 
160: 52 53 52 51 50 e8 33 05 
168: 00 00 58 59 5a 5b 41 5a 
176: 56 50 f2 0f 10 44 24 00 
184: 48 83 c4 08 f2 48 0f 2d 
192: f0 48 c1 e6 03 49 01 f2 
200: 5f 49 89 ba 10 00 00 00 
208: 49 29 f2 50 f2 0f 10 44 
216: 24 00 48 83 c4 08 f2 48 
224: 0f 2d f0 48 c1 e6 03 49 
232: 01 f2 49 8b ba 00 00 00 
240: 00 57 49 29 f2 50 f2 0f 
248: 10 44 24 00 48 83 c4 08 
256: f2 48 0f 2d f0 48 c1 e6 
264: 03 49 01 f2 49 8b ba 08 
272: 00 00 00 57 49 29 f2 50 
280: f2 0f 10 44 24 00 48 83 
288: c4 08 f2 48 0f 2d f0 48 
296: c1 e6 03 49 01 f2 49 8b 
304: ba 10 00 00 00 57 49 29 
312: f2 48 be 00 00 00 00 00 
320: 00 10 40 56 50 f2 0f 10 
328: 44 24 00 f2 0f 10 4c 24 
336: 08 48 83 c4 08 f2 0f 58 
344: c1 f2 0f 11 44 24 00 58 
352: e8 97 00 00 00 48 be 00 
360: 00 00 00 00 00 10 40 56 
368: 50 f2 0f 10 44 24 00 f2 
376: 0f 10 4c 24 08 48 83 c4 
384: 08 f2 0f 5c c1 f2 0f 11 
392: 44 24 00 58 50 f2 0f 10 
400: 44 24 00 48 83 c4 08 f2 
408: 48 0f 2d f0 48 c1 e6 03 
416: 49 01 f2 5f 49 89 ba 00 
424: 00 00 00 49 29 f2 50 f2 
432: 0f 10 44 24 00 48 83 c4 
440: 08 f2 48 0f 2d f0 48 c1 
448: e6 03 49 01 f2 49 8b ba 
456: 00 00 00 00 57 49 29 f2 
464: f2 0f 10 44 24 00 f2 48 
472: 0f 2d f0 56 58 41 52 53 
480: 52 51 50 49 89 e4 48 83 
488: e4 f0 e8 13 03 00 00 4c 
496: 89 e4 58 59 5a 5b 41 5a 
504: 5f 5a 52 c3 5a 50 f2 0f 
512: 10 44 24 00 48 83 c4 08 
520: f2 48 0f 2d f0 48 c1 e6 
528: 03 49 01 f2 5f 49 89 ba 
536: 00 00 00 00 49 29 f2 50 
544: f2 0f 10 44 24 00 48 83 
552: c4 08 f2 48 0f 2d f0 48 
560: c1 e6 03 49 01 f2 5f 49 
568: 89 ba 08 00 00 00 49 29 
576: f2 50 f2 0f 10 44 24 00 
584: 48 83 c4 08 f2 48 0f 2d 
592: f0 48 c1 e6 03 49 01 f2 
600: 5f 49 89 ba 10 00 00 00 
608: 49 29 f2 52 50 f2 0f 10 
616: 44 24 00 48 83 c4 08 f2 
624: 48 0f 2d f0 48 c1 e6 03 
632: 49 01 f2 49 8b ba 08 00 
640: 00 00 57 49 29 f2 48 be 
648: 00 00 00 00 00 00 f0 3f 
656: 56 f2 0f 10 44 24 00 f2 
664: 0f 10 4c 24 08 48 83 c4 
672: 08 f2 0f 58 c1 f2 0f 11 
680: 44 24 00 50 f2 0f 10 44 
688: 24 00 48 83 c4 08 f2 48 
696: 0f 2d f0 48 c1 e6 03 49 
704: 01 f2 5f 49 89 ba 08 00 
712: 00 00 49 29 f2 50 f2 0f 
720: 10 44 24 00 48 83 c4 08 
728: f2 48 0f 2d f0 48 c1 e6 
736: 03 49 01 f2 49 8b ba 10 
744: 00 00 00 57 49 29 f2 50 
752: f2 0f 10 44 24 00 48 83 
760: c4 08 f2 48 0f 2d f0 48 
768: c1 e6 03 49 01 f2 49 8b 
776: ba 08 00 00 00 57 49 29 
784: f2 f2 0f 10 44 24 00 f2 
792: 0f 10 4c 24 08 48 83 c4 
800: 08 f2 0f 59 c1 f2 0f 11 
808: 44 24 00 50 f2 0f 10 44 
816: 24 00 48 83 c4 08 f2 48 
824: 0f 2d f0 48 c1 e6 03 49 
832: 01 f2 5f 49 89 ba 10 00 
840: 00 00 49 29 f2 48 be 00 
848: 00 00 00 00 c0 5e 40 56 
856: 50 f2 0f 10 44 24 00 48 
864: 83 c4 08 f2 48 0f 2d f0 
872: 48 c1 e6 03 49 01 f2 5f 
880: 49 89 ba 18 00 00 00 49 
888: 29 f2 50 f2 0f 10 44 24 
896: 00 48 83 c4 08 f2 48 0f 
904: 2d f0 48 c1 e6 03 49 01 
912: f2 49 8b ba 08 00 00 00 
920: 57 49 29 f2 50 f2 0f 10 
928: 44 24 00 48 83 c4 08 f2 
936: 48 0f 2d f0 48 c1 e6 03 
944: 49 01 f2 49 8b ba 00 00 
952: 00 00 57 49 29 f2 f2 0f 
960: 10 44 24 00 f2 0f 10 4c 
968: 24 08 48 83 c4 10 66 0f 
976: 2e c1 0f 85 2a 00 00 00 
984: 5a 50 f2 0f 10 44 24 00 
992: 48 83 c4 08 f2 48 0f 2d 
1000: f0 48 c1 e6 03 49 01 f2 
1008: 49 8b ba 10 00 00 00 57 
1016: 49 29 f2 52 c3 e9 db 00 
1024: 00 00 50 f2 0f 10 44 24 
1032: 00 48 83 c4 08 f2 48 0f 
1040: 2d f0 48 c1 e6 03 49 01 
1048: f2 49 8b ba 10 00 00 00 
1056: 57 49 29 f2 50 f2 0f 10 
1064: 44 24 00 48 83 c4 08 f2 
1072: 48 0f 2d f0 48 c1 e6 03 
1080: 49 01 f2 49 8b ba 08 00 
1088: 00 00 57 49 29 f2 50 f2 
1096: 0f 10 44 24 00 48 83 c4 
1104: 08 f2 48 0f 2d f0 48 c1 
1112: e6 03 49 01 f2 49 8b ba 
1120: 00 00 00 00 57 49 29 f2 
1128: 48 be 00 00 00 00 00 00 
1136: 14 40 56 50 f2 0f 10 44 
1144: 24 00 f2 0f 10 4c 24 08 
1152: 48 83 c4 08 f2 0f 58 c1 
1160: f2 0f 11 44 24 00 58 e8 
1168: 68 fd ff ff 48 be 00 00 
1176: 00 00 00 00 14 40 56 50 
1184: f2 0f 10 44 24 00 f2 0f 
1192: 10 4c 24 08 48 83 c4 08 
1200: f2 0f 5c c1 f2 0f 11 44 
1208: 24 00 58 50 f2 0f 10 44 
1216: 24 00 48 83 c4 08 f2 48 
1224: 0f 2d f0 48 c1 e6 03 49 
1232: 01 f2 5f 49 89 ba 10 00 
1240: 00 00 49 29 f2 5a 50 f2 
1248: 0f 10 44 24 00 48 83 c4 
1256: 08 f2 48 0f 2d f0 48 c1 
1264: e6 03 49 01 f2 49 8b ba 
1272: 10 00 00 00 57 49 29 f2 
1280: 52 c3 00 

====== x86 buffer dump end =======

