Ip   8:
	Id: 17
	Yeah, it is jump
Ip  18:
	Id: 18
Ip  19:
	Id: 1
Ip  29:
	Id: 6
Ip  39:
	Id: 1
Ip  49:
	Id: 6
Ip  59:
	Id: 1
Ip  69:
	Id: 6
Ip  79:
	Id: 1
Ip  89:
	Id: 1
Ip  99:
	Id: 1
Ip 109:
	Id: 1
Ip 119:
	Id: 1
Ip 129:
	Id: 3
Ip 130:
	Id: 6
Ip 140:
	Id: 17
	Yeah, it is jump
Ip 150:
	Id: 1
Ip 160:
	Id: 1
Ip 170:
	Id: 4
Ip 171:
	Id: 6
Ip 181:
	Id: 6
Ip 191:
	Id: 1
Ip 201:
	Id: 7
Ip 202:
	Id: 18
Ip 203:
	Id: 6
Ip 213:
	Id: 6
Ip 223:
	Id: 6
Ip 233:
	Id: 1
Ip 243:
	Id: 1
Ip 253:
	Id: 3
Ip 254:
	Id: 6
Ip 264:
	Id: 1
Ip 274:
	Id: 1
Ip 284:
	Id: 2
Ip 285:
	Id: 6
Ip 295:
	Id: 1
Ip 305:
	Id: 6
Ip 315:
	Id: 1
Ip 325:
	Id: 1
Ip 335:
	Id: 15
	Yeah, it is jump
Ip 345:
	Id: 1
Ip 355:
	Id: 18
Ip 356:
	Id: 9
	Yeah, it is jump
Ip 366:
	Id: 1
Ip 376:
	Id: 1
Ip 386:
	Id: 1
Ip 396:
	Id: 1
Ip 406:
	Id: 1
Ip 416:
	Id: 3
Ip 417:
	Id: 6
Ip 427:
	Id: 17
	Yeah, it is jump
Ip 437:
	Id: 1
Ip 447:
	Id: 1
Ip 457:
	Id: 4
Ip 458:
	Id: 6
Ip 468:
	Id: 6
Ip 478:
	Id: 1
Ip 488:
	Id: 18
Ip 489:
End of prog.

================ Begin of struct dump ==================

Command < CALL: 17 > | Native/x86 size: 10/5 | x86 ip: 0
	Yeah, it is jump
	+Wants to jump into 19

Command < RET: 18 > | Native/x86 size: 1/1 | x86 ip: 0

Command < PUSH: 1 > | Native/x86 size: 10/11 | x86 ip: 0
Checksum: 32
	+Operating width digit, value: 1

Command < POP: 6 > | Native/x86 size: 10/34 | x86 ip: 0
Checksum: 224
	+Using register, its id: 0
	+Operating width digit, value: 0
--- Adresses to memory

Command < PUSH: 1 > | Native/x86 size: 10/11 | x86 ip: 0
Checksum: 32
	+Operating width digit, value: 1

Command < POP: 6 > | Native/x86 size: 10/34 | x86 ip: 0
Checksum: 224
	+Using register, its id: 0
	+Operating width digit, value: 1
--- Adresses to memory

Command < PUSH: 1 > | Native/x86 size: 10/11 | x86 ip: 0
Checksum: 32
	+Operating width digit, value: 2

Command < POP: 6 > | Native/x86 size: 10/34 | x86 ip: 0
Checksum: 224
	+Using register, its id: 0
	+Operating width digit, value: 2
--- Adresses to memory

Command < PUSH: 1 > | Native/x86 size: 10/34 | x86 ip: 0
Checksum: 224
	+Using register, its id: 0
	+Operating width digit, value: 0
--- Adresses to memory

Command < PUSH: 1 > | Native/x86 size: 10/34 | x86 ip: 0
Checksum: 224
	+Using register, its id: 0
	+Operating width digit, value: 1
--- Adresses to memory

Command < PUSH: 1 > | Native/x86 size: 10/34 | x86 ip: 0
Checksum: 224
	+Using register, its id: 0
	+Operating width digit, value: 2
--- Adresses to memory

Command < PUSH: 1 > | Native/x86 size: 10/11 | x86 ip: 0
Checksum: 32
	+Operating width digit, value: 4

Command < PUSH: 1 > | Native/x86 size: 10/1 | x86 ip: 0
Checksum: 64
	+Using register, its id: 0

Command < ADD: 3 > | Native/x86 size: 1/26 | x86 ip: 0

Command < POP: 6 > | Native/x86 size: 10/1 | x86 ip: 0
Checksum: 64
	+Using register, its id: 0

Command < CALL: 17 > | Native/x86 size: 10/5 | x86 ip: 0
	Yeah, it is jump
	+Wants to jump into 203

Command < PUSH: 1 > | Native/x86 size: 10/11 | x86 ip: 0
Checksum: 32
	+Operating width digit, value: 4

Command < PUSH: 1 > | Native/x86 size: 10/1 | x86 ip: 0
Checksum: 64
	+Using register, its id: 0

Command < SUB: 4 > | Native/x86 size: 1/26 | x86 ip: 0

Command < POP: 6 > | Native/x86 size: 10/1 | x86 ip: 0
Checksum: 64
	+Using register, its id: 0

Command < POP: 6 > | Native/x86 size: 10/34 | x86 ip: 0
Checksum: 224
	+Using register, its id: 0
	+Operating width digit, value: 0
--- Adresses to memory

Command < PUSH: 1 > | Native/x86 size: 10/34 | x86 ip: 0
Checksum: 224
	+Using register, its id: 0
	+Operating width digit, value: 0
--- Adresses to memory

Command < OUT: 7 > | Native/x86 size: 1/34 | x86 ip: 0

Command < RET: 18 > | Native/x86 size: 1/1 | x86 ip: 0

Command < POP: 6 > | Native/x86 size: 10/34 | x86 ip: 0
Checksum: 224
	+Using register, its id: 0
	+Operating width digit, value: 0
--- Adresses to memory

Command < POP: 6 > | Native/x86 size: 10/34 | x86 ip: 0
Checksum: 224
	+Using register, its id: 0
	+Operating width digit, value: 1
--- Adresses to memory

Command < POP: 6 > | Native/x86 size: 10/34 | x86 ip: 0
Checksum: 224
	+Using register, its id: 0
	+Operating width digit, value: 2
--- Adresses to memory

Command < PUSH: 1 > | Native/x86 size: 10/34 | x86 ip: 0
Checksum: 224
	+Using register, its id: 0
	+Operating width digit, value: 1
--- Adresses to memory

Command < PUSH: 1 > | Native/x86 size: 10/11 | x86 ip: 0
Checksum: 32
	+Operating width digit, value: 1

Command < ADD: 3 > | Native/x86 size: 1/26 | x86 ip: 0

Command < POP: 6 > | Native/x86 size: 10/34 | x86 ip: 0
Checksum: 224
	+Using register, its id: 0
	+Operating width digit, value: 1
--- Adresses to memory

Command < PUSH: 1 > | Native/x86 size: 10/34 | x86 ip: 0
Checksum: 224
	+Using register, its id: 0
	+Operating width digit, value: 2
--- Adresses to memory

Command < PUSH: 1 > | Native/x86 size: 10/34 | x86 ip: 0
Checksum: 224
	+Using register, its id: 0
	+Operating width digit, value: 1
--- Adresses to memory

Command < MUL: 2 > | Native/x86 size: 1/26 | x86 ip: 0

Command < POP: 6 > | Native/x86 size: 10/34 | x86 ip: 0
Checksum: 224
	+Using register, its id: 0
	+Operating width digit, value: 2
--- Adresses to memory

Command < PUSH: 1 > | Native/x86 size: 10/11 | x86 ip: 0
Checksum: 32
	+Operating width digit, value: 123

Command < POP: 6 > | Native/x86 size: 10/34 | x86 ip: 0
Checksum: 224
	+Using register, its id: 0
	+Operating width digit, value: 3
--- Adresses to memory

Command < PUSH: 1 > | Native/x86 size: 10/34 | x86 ip: 0
Checksum: 224
	+Using register, its id: 0
	+Operating width digit, value: 1
--- Adresses to memory

Command < PUSH: 1 > | Native/x86 size: 10/34 | x86 ip: 0
Checksum: 224
	+Using register, its id: 0
	+Operating width digit, value: 0
--- Adresses to memory

Command < JNE: 15 > | Native/x86 size: 10/26 | x86 ip: 0
	Yeah, it is jump
	+Wants to jump into 366

Command < PUSH: 1 > | Native/x86 size: 10/34 | x86 ip: 0
Checksum: 224
	+Using register, its id: 0
	+Operating width digit, value: 2
--- Adresses to memory

Command < RET: 18 > | Native/x86 size: 1/1 | x86 ip: 0

Command < JMP: 9 > | Native/x86 size: 10/5 | x86 ip: 0
	Yeah, it is jump
	+Wants to jump into 478

Command < PUSH: 1 > | Native/x86 size: 10/34 | x86 ip: 0
Checksum: 224
	+Using register, its id: 0
	+Operating width digit, value: 2
--- Adresses to memory

Command < PUSH: 1 > | Native/x86 size: 10/34 | x86 ip: 0
Checksum: 224
	+Using register, its id: 0
	+Operating width digit, value: 1
--- Adresses to memory

Command < PUSH: 1 > | Native/x86 size: 10/34 | x86 ip: 0
Checksum: 224
	+Using register, its id: 0
	+Operating width digit, value: 0
--- Adresses to memory

Command < PUSH: 1 > | Native/x86 size: 10/11 | x86 ip: 0
Checksum: 32
	+Operating width digit, value: 5

Command < PUSH: 1 > | Native/x86 size: 10/1 | x86 ip: 0
Checksum: 64
	+Using register, its id: 0

Command < ADD: 3 > | Native/x86 size: 1/26 | x86 ip: 0

Command < POP: 6 > | Native/x86 size: 10/1 | x86 ip: 0
Checksum: 64
	+Using register, its id: 0

Command < CALL: 17 > | Native/x86 size: 10/5 | x86 ip: 0
	Yeah, it is jump
	+Wants to jump into 203

Command < PUSH: 1 > | Native/x86 size: 10/11 | x86 ip: 0
Checksum: 32
	+Operating width digit, value: 5

Command < PUSH: 1 > | Native/x86 size: 10/1 | x86 ip: 0
Checksum: 64
	+Using register, its id: 0

Command < SUB: 4 > | Native/x86 size: 1/26 | x86 ip: 0

Command < POP: 6 > | Native/x86 size: 10/1 | x86 ip: 0
Checksum: 64
	+Using register, its id: 0

Command < POP: 6 > | Native/x86 size: 10/34 | x86 ip: 0
Checksum: 224
	+Using register, its id: 0
	+Operating width digit, value: 2
--- Adresses to memory

Command < PUSH: 1 > | Native/x86 size: 10/34 | x86 ip: 0
Checksum: 224
	+Using register, its id: 0
	+Operating width digit, value: 2
--- Adresses to memory

Command < RET: 18 > | Native/x86 size: 1/1 | x86 ip: 0

================ End of struct dump ==================

Optimization attempt: mov r?x, num
Optimization attempt: mov r?x, num
Optimization attempt: mov r?x, num
Optimization attempt: mov r?x, num
Optimization attempt: constant arithmetics
Optimization attempt: mov r?x, num
Optimization attempt: constant arithmetics
Optimization attempt: mov r?x, num
Optimization attempt: constant arithmetics
Optimization attempt: constant arithmetics
Optimization attempt: mov r?x, num
Optimization attempt: mov r?x, num
Optimization attempt: constant arithmetics
Optimization attempt: mov r?x, num
Optimization attempt: constant arithmetics


---------- Filling labels --------

	Yeah, it is jump
 0: Trying to find x86 ip for ip 19:
	 Found, x86 ip is 6
	Yeah, it is jump
15: Trying to find x86 ip for ip 203:
	 Found, x86 ip is 429
	Yeah, it is jump
39: Trying to find x86 ip for ip 366:
	 Found, x86 ip is 943
	Yeah, it is jump
42: Trying to find x86 ip for ip 478:
	 Found, x86 ip is 1162
	Yeah, it is jump
50: Trying to find x86 ip for ip 203:
	 Found, x86 ip is 429


---------- End filling labels --------


================ Begin of struct dump ==================

Command < CALL: 17 > | Native/x86 size: 10/5 | x86 ip: 0
	Yeah, it is jump
	+Wants to jump into 6

Command < RET: 18 > | Native/x86 size: 1/1 | x86 ip: 5

Command < PUSH: 1 > | Native/x86 size: 10/11 | x86 ip: 6
Checksum: 32
	+Operating width digit, value: 1

Command < POP: 6 > | Native/x86 size: 10/34 | x86 ip: 17
Checksum: 224
	+Using register, its id: 0
	+Operating width digit, value: 0
--- Adresses to memory

Command < PUSH: 1 > | Native/x86 size: 10/11 | x86 ip: 51
Checksum: 32
	+Operating width digit, value: 1

Command < POP: 6 > | Native/x86 size: 10/34 | x86 ip: 62
Checksum: 224
	+Using register, its id: 0
	+Operating width digit, value: 1
--- Adresses to memory

Command < PUSH: 1 > | Native/x86 size: 10/11 | x86 ip: 96
Checksum: 32
	+Operating width digit, value: 2

Command < POP: 6 > | Native/x86 size: 10/34 | x86 ip: 107
Checksum: 224
	+Using register, its id: 0
	+Operating width digit, value: 2
--- Adresses to memory

Command < PUSH: 1 > | Native/x86 size: 10/34 | x86 ip: 141
Checksum: 224
	+Using register, its id: 0
	+Operating width digit, value: 0
--- Adresses to memory

Command < PUSH: 1 > | Native/x86 size: 10/34 | x86 ip: 175
Checksum: 224
	+Using register, its id: 0
	+Operating width digit, value: 1
--- Adresses to memory

Command < PUSH: 1 > | Native/x86 size: 10/34 | x86 ip: 209
Checksum: 224
	+Using register, its id: 0
	+Operating width digit, value: 2
--- Adresses to memory

Command < PUSH: 1 > | Native/x86 size: 10/11 | x86 ip: 243
Checksum: 32
	+Operating width digit, value: 4

Command < PUSH: 1 > | Native/x86 size: 10/1 | x86 ip: 254
Checksum: 64
	+Using register, its id: 0

Command < ADD: 3 > | Native/x86 size: 1/26 | x86 ip: 255

Command < POP: 6 > | Native/x86 size: 10/1 | x86 ip: 281
Checksum: 64
	+Using register, its id: 0

Command < CALL: 17 > | Native/x86 size: 10/5 | x86 ip: 282
	Yeah, it is jump
	+Wants to jump into 429

Command < PUSH: 1 > | Native/x86 size: 10/11 | x86 ip: 287
Checksum: 32
	+Operating width digit, value: 4

Command < PUSH: 1 > | Native/x86 size: 10/1 | x86 ip: 298
Checksum: 64
	+Using register, its id: 0

Command < SUB: 4 > | Native/x86 size: 1/26 | x86 ip: 299

Command < POP: 6 > | Native/x86 size: 10/1 | x86 ip: 325
Checksum: 64
	+Using register, its id: 0

Command < POP: 6 > | Native/x86 size: 10/34 | x86 ip: 326
Checksum: 224
	+Using register, its id: 0
	+Operating width digit, value: 0
--- Adresses to memory

Command < PUSH: 1 > | Native/x86 size: 10/34 | x86 ip: 360
Checksum: 224
	+Using register, its id: 0
	+Operating width digit, value: 0
--- Adresses to memory

Command < OUT: 7 > | Native/x86 size: 1/34 | x86 ip: 394

Command < RET: 18 > | Native/x86 size: 1/1 | x86 ip: 428

Command < POP: 6 > | Native/x86 size: 10/34 | x86 ip: 429
Checksum: 224
	+Using register, its id: 0
	+Operating width digit, value: 0
--- Adresses to memory

Command < POP: 6 > | Native/x86 size: 10/34 | x86 ip: 463
Checksum: 224
	+Using register, its id: 0
	+Operating width digit, value: 1
--- Adresses to memory

Command < POP: 6 > | Native/x86 size: 10/34 | x86 ip: 497
Checksum: 224
	+Using register, its id: 0
	+Operating width digit, value: 2
--- Adresses to memory

Command < PUSH: 1 > | Native/x86 size: 10/34 | x86 ip: 531
Checksum: 224
	+Using register, its id: 0
	+Operating width digit, value: 1
--- Adresses to memory

Command < PUSH: 1 > | Native/x86 size: 10/11 | x86 ip: 565
Checksum: 32
	+Operating width digit, value: 1

Command < ADD: 3 > | Native/x86 size: 1/26 | x86 ip: 576

Command < POP: 6 > | Native/x86 size: 10/34 | x86 ip: 602
Checksum: 224
	+Using register, its id: 0
	+Operating width digit, value: 1
--- Adresses to memory

Command < PUSH: 1 > | Native/x86 size: 10/34 | x86 ip: 636
Checksum: 224
	+Using register, its id: 0
	+Operating width digit, value: 2
--- Adresses to memory

Command < PUSH: 1 > | Native/x86 size: 10/34 | x86 ip: 670
Checksum: 224
	+Using register, its id: 0
	+Operating width digit, value: 1
--- Adresses to memory

Command < MUL: 2 > | Native/x86 size: 1/26 | x86 ip: 704

Command < POP: 6 > | Native/x86 size: 10/34 | x86 ip: 730
Checksum: 224
	+Using register, its id: 0
	+Operating width digit, value: 2
--- Adresses to memory

Command < PUSH: 1 > | Native/x86 size: 10/11 | x86 ip: 764
Checksum: 32
	+Operating width digit, value: 123

Command < POP: 6 > | Native/x86 size: 10/34 | x86 ip: 775
Checksum: 224
	+Using register, its id: 0
	+Operating width digit, value: 3
--- Adresses to memory

Command < PUSH: 1 > | Native/x86 size: 10/34 | x86 ip: 809
Checksum: 224
	+Using register, its id: 0
	+Operating width digit, value: 1
--- Adresses to memory

Command < PUSH: 1 > | Native/x86 size: 10/34 | x86 ip: 843
Checksum: 224
	+Using register, its id: 0
	+Operating width digit, value: 0
--- Adresses to memory

Command < JNE: 15 > | Native/x86 size: 10/26 | x86 ip: 877
	Yeah, it is jump
	+Wants to jump into 943

Command < PUSH: 1 > | Native/x86 size: 10/34 | x86 ip: 903
Checksum: 224
	+Using register, its id: 0
	+Operating width digit, value: 2
--- Adresses to memory

Command < RET: 18 > | Native/x86 size: 1/1 | x86 ip: 937

Command < JMP: 9 > | Native/x86 size: 10/5 | x86 ip: 938
	Yeah, it is jump
	+Wants to jump into 1162

Command < PUSH: 1 > | Native/x86 size: 10/34 | x86 ip: 943
Checksum: 224
	+Using register, its id: 0
	+Operating width digit, value: 2
--- Adresses to memory

Command < PUSH: 1 > | Native/x86 size: 10/34 | x86 ip: 977
Checksum: 224
	+Using register, its id: 0
	+Operating width digit, value: 1
--- Adresses to memory

Command < PUSH: 1 > | Native/x86 size: 10/34 | x86 ip: 1011
Checksum: 224
	+Using register, its id: 0
	+Operating width digit, value: 0
--- Adresses to memory

Command < PUSH: 1 > | Native/x86 size: 10/11 | x86 ip: 1045
Checksum: 32
	+Operating width digit, value: 5

Command < PUSH: 1 > | Native/x86 size: 10/1 | x86 ip: 1056
Checksum: 64
	+Using register, its id: 0

Command < ADD: 3 > | Native/x86 size: 1/26 | x86 ip: 1057

Command < POP: 6 > | Native/x86 size: 10/1 | x86 ip: 1083
Checksum: 64
	+Using register, its id: 0

Command < CALL: 17 > | Native/x86 size: 10/5 | x86 ip: 1084
	Yeah, it is jump
	+Wants to jump into 429

Command < PUSH: 1 > | Native/x86 size: 10/11 | x86 ip: 1089
Checksum: 32
	+Operating width digit, value: 5

Command < PUSH: 1 > | Native/x86 size: 10/1 | x86 ip: 1100
Checksum: 64
	+Using register, its id: 0

Command < SUB: 4 > | Native/x86 size: 1/26 | x86 ip: 1101

Command < POP: 6 > | Native/x86 size: 10/1 | x86 ip: 1127
Checksum: 64
	+Using register, its id: 0

Command < POP: 6 > | Native/x86 size: 10/34 | x86 ip: 1128
Checksum: 224
	+Using register, its id: 0
	+Operating width digit, value: 2
--- Adresses to memory

Command < PUSH: 1 > | Native/x86 size: 10/34 | x86 ip: 1162
Checksum: 224
	+Using register, its id: 0
	+Operating width digit, value: 2
--- Adresses to memory

Command < RET: 18 > | Native/x86 size: 1/1 | x86 ip: 1196

================ End of struct dump ==================

---------- Begin translation -------------

##########
	 0: 49 ba 
##########

Translating Jump or Call
##########
	 0: e8 
##########

Translating RET
##########
	 0: c3 
##########

<6>:Push IMM

##########
	 0: 48 be 
##########


##########
	 0: 56 
##########

Translating push ram

##########
	 0: 50 
##########


##########
	 0: f2 0f 10 44 24 00 
##########


##########
	 0: 48 83 c4 08 
##########


##########
	 0: f2 48 0f 2d f0 
##########


##########
	 0: 48 c1 e6 03 
##########


##########
	 0: 49 01 f2 
##########


##########
	 0: 5f 
##########


##########
	 0: 49 89 ba 
##########


##########
	 0: 49 29 f2 
##########

<51>:Push IMM

##########
	 0: 48 be 
##########


##########
	 0: 56 
##########

Translating push ram

##########
	 0: 50 
##########


##########
	 0: f2 0f 10 44 24 00 
##########


##########
	 0: 48 83 c4 08 
##########


##########
	 0: f2 48 0f 2d f0 
##########


##########
	 0: 48 c1 e6 03 
##########


##########
	 0: 49 01 f2 
##########


##########
	 0: 5f 
##########


##########
	 0: 49 89 ba 
##########


##########
	 0: 49 29 f2 
##########

<96>:Push IMM

##########
	 0: 48 be 
##########


##########
	 0: 56 
##########

Translating push ram

##########
	 0: 50 
##########


##########
	 0: f2 0f 10 44 24 00 
##########


##########
	 0: 48 83 c4 08 
##########


##########
	 0: f2 48 0f 2d f0 
##########


##########
	 0: 48 c1 e6 03 
##########


##########
	 0: 49 01 f2 
##########


##########
	 0: 5f 
##########


##########
	 0: 49 89 ba 
##########


##########
	 0: 49 29 f2 
##########

Translating push ram

##########
	 0: 50 
##########


##########
	 0: f2 0f 10 44 24 00 
##########


##########
	 0: 48 83 c4 08 
##########


##########
	 0: f2 48 0f 2d f0 
##########


##########
	 0: 48 c1 e6 03 
##########


##########
	 0: 49 01 f2 
##########


##########
	 0: 49 8b ba 
##########


##########
	 0: 57 
##########


##########
	 0: 49 29 f2 
##########

Translating push ram

##########
	 0: 50 
##########


##########
	 0: f2 0f 10 44 24 00 
##########


##########
	 0: 48 83 c4 08 
##########


##########
	 0: f2 48 0f 2d f0 
##########


##########
	 0: 48 c1 e6 03 
##########


##########
	 0: 49 01 f2 
##########


##########
	 0: 49 8b ba 
##########


##########
	 0: 57 
##########


##########
	 0: 49 29 f2 
##########

Translating push ram

##########
	 0: 50 
##########


##########
	 0: f2 0f 10 44 24 00 
##########


##########
	 0: 48 83 c4 08 
##########


##########
	 0: f2 48 0f 2d f0 
##########


##########
	 0: 48 c1 e6 03 
##########


##########
	 0: 49 01 f2 
##########


##########
	 0: 49 8b ba 
##########


##########
	 0: 57 
##########


##########
	 0: 49 29 f2 
##########

<243>:Push IMM

##########
	 0: 48 be 
##########


##########
	 0: 56 
##########

254:Push/Pop REG

##########
	 0: 50 
##########

13: Translating math

##########
	 0: f2 0f 10 44 24 00 
##########


##########
	 0: f2 0f 10 4c 24 08 
##########


##########
	 0: 48 83 c4 08 
##########


##########
	 0: f2 0f 58 c1 
##########


##########
	 0: f2 0f 11 44 24 00 
##########

281:Push/Pop REG

##########
	 0: 58 
##########

Translating Jump or Call
##########
	 0: e8 
##########

<287>:Push IMM

##########
	 0: 48 be 
##########


##########
	 0: 56 
##########

298:Push/Pop REG

##########
	 0: 50 
##########

18: Translating math

##########
	 0: f2 0f 10 44 24 00 
##########


##########
	 0: f2 0f 10 4c 24 08 
##########


##########
	 0: 48 83 c4 08 
##########


##########
	 0: f2 0f 5c c1 
##########


##########
	 0: f2 0f 11 44 24 00 
##########

325:Push/Pop REG

##########
	 0: 58 
##########

Translating push ram

##########
	 0: 50 
##########


##########
	 0: f2 0f 10 44 24 00 
##########


##########
	 0: 48 83 c4 08 
##########


##########
	 0: f2 48 0f 2d f0 
##########


##########
	 0: 48 c1 e6 03 
##########


##########
	 0: 49 01 f2 
##########


##########
	 0: 5f 
##########


##########
	 0: 49 89 ba 
##########


##########
	 0: 49 29 f2 
##########

Translating push ram

##########
	 0: 50 
##########


##########
	 0: f2 0f 10 44 24 00 
##########


##########
	 0: 48 83 c4 08 
##########


##########
	 0: f2 48 0f 2d f0 
##########


##########
	 0: 48 c1 e6 03 
##########


##########
	 0: 49 01 f2 
##########


##########
	 0: 49 8b ba 
##########


##########
	 0: 57 
##########


##########
	 0: 49 29 f2 
##########

Translating OUT
##########
	 0: f2 0f 10 44 24 00 
##########


##########
	 0: 41 52 53 52 51 50 
##########


##########
	 0: 49 89 e4 
##########


##########
	 0: 48 83 e4 f0 
##########


##########
	 0: e8 
##########


##########
	 0: 4c 89 e4 
##########


##########
	 0: 58 59 5a 5b 41 5a 
##########


##########
	 0: 5f 
##########

Translating RET
##########
	 0: c3 
##########

Translating push ram

##########
	 0: 50 
##########


##########
	 0: f2 0f 10 44 24 00 
##########


##########
	 0: 48 83 c4 08 
##########


##########
	 0: f2 48 0f 2d f0 
##########


##########
	 0: 48 c1 e6 03 
##########


##########
	 0: 49 01 f2 
##########


##########
	 0: 5f 
##########


##########
	 0: 49 89 ba 
##########


##########
	 0: 49 29 f2 
##########

Translating push ram

##########
	 0: 50 
##########


##########
	 0: f2 0f 10 44 24 00 
##########


##########
	 0: 48 83 c4 08 
##########


##########
	 0: f2 48 0f 2d f0 
##########


##########
	 0: 48 c1 e6 03 
##########


##########
	 0: 49 01 f2 
##########


##########
	 0: 5f 
##########


##########
	 0: 49 89 ba 
##########


##########
	 0: 49 29 f2 
##########

Translating push ram

##########
	 0: 50 
##########


##########
	 0: f2 0f 10 44 24 00 
##########


##########
	 0: 48 83 c4 08 
##########


##########
	 0: f2 48 0f 2d f0 
##########


##########
	 0: 48 c1 e6 03 
##########


##########
	 0: 49 01 f2 
##########


##########
	 0: 5f 
##########


##########
	 0: 49 89 ba 
##########


##########
	 0: 49 29 f2 
##########

Translating push ram

##########
	 0: 50 
##########


##########
	 0: f2 0f 10 44 24 00 
##########


##########
	 0: 48 83 c4 08 
##########


##########
	 0: f2 48 0f 2d f0 
##########


##########
	 0: 48 c1 e6 03 
##########


##########
	 0: 49 01 f2 
##########


##########
	 0: 49 8b ba 
##########


##########
	 0: 57 
##########


##########
	 0: 49 29 f2 
##########

<565>:Push IMM

##########
	 0: 48 be 
##########


##########
	 0: 56 
##########

29: Translating math

##########
	 0: f2 0f 10 44 24 00 
##########


##########
	 0: f2 0f 10 4c 24 08 
##########


##########
	 0: 48 83 c4 08 
##########


##########
	 0: f2 0f 58 c1 
##########


##########
	 0: f2 0f 11 44 24 00 
##########

Translating push ram

##########
	 0: 50 
##########


##########
	 0: f2 0f 10 44 24 00 
##########


##########
	 0: 48 83 c4 08 
##########


##########
	 0: f2 48 0f 2d f0 
##########


##########
	 0: 48 c1 e6 03 
##########


##########
	 0: 49 01 f2 
##########


##########
	 0: 5f 
##########


##########
	 0: 49 89 ba 
##########


##########
	 0: 49 29 f2 
##########

Translating push ram

##########
	 0: 50 
##########


##########
	 0: f2 0f 10 44 24 00 
##########


##########
	 0: 48 83 c4 08 
##########


##########
	 0: f2 48 0f 2d f0 
##########


##########
	 0: 48 c1 e6 03 
##########


##########
	 0: 49 01 f2 
##########


##########
	 0: 49 8b ba 
##########


##########
	 0: 57 
##########


##########
	 0: 49 29 f2 
##########

Translating push ram

##########
	 0: 50 
##########


##########
	 0: f2 0f 10 44 24 00 
##########


##########
	 0: 48 83 c4 08 
##########


##########
	 0: f2 48 0f 2d f0 
##########


##########
	 0: 48 c1 e6 03 
##########


##########
	 0: 49 01 f2 
##########


##########
	 0: 49 8b ba 
##########


##########
	 0: 57 
##########


##########
	 0: 49 29 f2 
##########

33: Translating math

##########
	 0: f2 0f 10 44 24 00 
##########


##########
	 0: f2 0f 10 4c 24 08 
##########


##########
	 0: 48 83 c4 08 
##########


##########
	 0: f2 0f 59 c1 
##########


##########
	 0: f2 0f 11 44 24 00 
##########

Translating push ram

##########
	 0: 50 
##########


##########
	 0: f2 0f 10 44 24 00 
##########


##########
	 0: 48 83 c4 08 
##########


##########
	 0: f2 48 0f 2d f0 
##########


##########
	 0: 48 c1 e6 03 
##########


##########
	 0: 49 01 f2 
##########


##########
	 0: 5f 
##########


##########
	 0: 49 89 ba 
##########


##########
	 0: 49 29 f2 
##########

<764>:Push IMM

##########
	 0: 48 be 
##########


##########
	 0: 56 
##########

Translating push ram

##########
	 0: 50 
##########


##########
	 0: f2 0f 10 44 24 00 
##########


##########
	 0: 48 83 c4 08 
##########


##########
	 0: f2 48 0f 2d f0 
##########


##########
	 0: 48 c1 e6 03 
##########


##########
	 0: 49 01 f2 
##########


##########
	 0: 5f 
##########


##########
	 0: 49 89 ba 
##########


##########
	 0: 49 29 f2 
##########

Translating push ram

##########
	 0: 50 
##########


##########
	 0: f2 0f 10 44 24 00 
##########


##########
	 0: 48 83 c4 08 
##########


##########
	 0: f2 48 0f 2d f0 
##########


##########
	 0: 48 c1 e6 03 
##########


##########
	 0: 49 01 f2 
##########


##########
	 0: 49 8b ba 
##########


##########
	 0: 57 
##########


##########
	 0: 49 29 f2 
##########

Translating push ram

##########
	 0: 50 
##########


##########
	 0: f2 0f 10 44 24 00 
##########


##########
	 0: 48 83 c4 08 
##########


##########
	 0: f2 48 0f 2d f0 
##########


##########
	 0: 48 c1 e6 03 
##########


##########
	 0: 49 01 f2 
##########


##########
	 0: 49 8b ba 
##########


##########
	 0: 57 
##########


##########
	 0: 49 29 f2 
##########

39: Translating jmp

##########
	 0: f2 0f 10 44 24 00 
##########


##########
	 0: f2 0f 10 4c 24 08 
##########


##########
	 0: 48 83 c4 10 
##########


##########
	 0: 66 0f 2e c1 
##########


##########
	 0: 0f 85 
##########

Translating push ram

##########
	 0: 50 
##########


##########
	 0: f2 0f 10 44 24 00 
##########


##########
	 0: 48 83 c4 08 
##########


##########
	 0: f2 48 0f 2d f0 
##########


##########
	 0: 48 c1 e6 03 
##########


##########
	 0: 49 01 f2 
##########


##########
	 0: 49 8b ba 
##########


##########
	 0: 57 
##########


##########
	 0: 49 29 f2 
##########

Translating RET
##########
	 0: c3 
##########

Translating Jump or Call
##########
	 0: e9 
##########

Translating push ram

##########
	 0: 50 
##########


##########
	 0: f2 0f 10 44 24 00 
##########


##########
	 0: 48 83 c4 08 
##########


##########
	 0: f2 48 0f 2d f0 
##########


##########
	 0: 48 c1 e6 03 
##########


##########
	 0: 49 01 f2 
##########


##########
	 0: 49 8b ba 
##########


##########
	 0: 57 
##########


##########
	 0: 49 29 f2 
##########

Translating push ram

##########
	 0: 50 
##########


##########
	 0: f2 0f 10 44 24 00 
##########


##########
	 0: 48 83 c4 08 
##########


##########
	 0: f2 48 0f 2d f0 
##########


##########
	 0: 48 c1 e6 03 
##########


##########
	 0: 49 01 f2 
##########


##########
	 0: 49 8b ba 
##########


##########
	 0: 57 
##########


##########
	 0: 49 29 f2 
##########

Translating push ram

##########
	 0: 50 
##########


##########
	 0: f2 0f 10 44 24 00 
##########


##########
	 0: 48 83 c4 08 
##########


##########
	 0: f2 48 0f 2d f0 
##########


##########
	 0: 48 c1 e6 03 
##########


##########
	 0: 49 01 f2 
##########


##########
	 0: 49 8b ba 
##########


##########
	 0: 57 
##########


##########
	 0: 49 29 f2 
##########

<1045>:Push IMM

##########
	 0: 48 be 
##########


##########
	 0: 56 
##########

1056:Push/Pop REG

##########
	 0: 50 
##########

48: Translating math

##########
	 0: f2 0f 10 44 24 00 
##########


##########
	 0: f2 0f 10 4c 24 08 
##########


##########
	 0: 48 83 c4 08 
##########


##########
	 0: f2 0f 58 c1 
##########


##########
	 0: f2 0f 11 44 24 00 
##########

1083:Push/Pop REG

##########
	 0: 58 
##########

Translating Jump or Call
##########
	 0: e8 
##########

<1089>:Push IMM

##########
	 0: 48 be 
##########


##########
	 0: 56 
##########

1100:Push/Pop REG

##########
	 0: 50 
##########

53: Translating math

##########
	 0: f2 0f 10 44 24 00 
##########


##########
	 0: f2 0f 10 4c 24 08 
##########


##########
	 0: 48 83 c4 08 
##########


##########
	 0: f2 0f 5c c1 
##########


##########
	 0: f2 0f 11 44 24 00 
##########

1127:Push/Pop REG

##########
	 0: 58 
##########

Translating push ram

##########
	 0: 50 
##########


##########
	 0: f2 0f 10 44 24 00 
##########


##########
	 0: 48 83 c4 08 
##########


##########
	 0: f2 48 0f 2d f0 
##########


##########
	 0: 48 c1 e6 03 
##########


##########
	 0: 49 01 f2 
##########


##########
	 0: 5f 
##########


##########
	 0: 49 89 ba 
##########


##########
	 0: 49 29 f2 
##########

Translating push ram

##########
	 0: 50 
##########


##########
	 0: f2 0f 10 44 24 00 
##########


##########
	 0: 48 83 c4 08 
##########


##########
	 0: f2 48 0f 2d f0 
##########


##########
	 0: 48 c1 e6 03 
##########


##########
	 0: 49 01 f2 
##########


##########
	 0: 49 8b ba 
##########


##########
	 0: 57 
##########


##########
	 0: 49 29 f2 
##########

Translating RET
##########
	 0: c3 
##########


##########
	 0: c3 
##########



====== x86 buffer dump begin =======

 0: 49 ba 00 10 35 02 00 00 
 8: 00 00 e8 01 00 00 00 c3 
16: 48 be 00 00 00 00 00 00 
24: f0 3f 56 50 f2 0f 10 44 
32: 24 00 48 83 c4 08 f2 48 
40: 0f 2d f0 48 c1 e6 03 49 
48: 01 f2 5f 49 89 ba 00 00 
56: 00 00 49 29 f2 48 be 00 
64: 00 00 00 00 00 f0 3f 56 
72: 50 f2 0f 10 44 24 00 48 
80: 83 c4 08 f2 48 0f 2d f0 
88: 48 c1 e6 03 49 01 f2 5f 
96: 49 89 ba 08 00 00 00 49 
104: 29 f2 48 be 00 00 00 00 
112: 00 00 00 40 56 50 f2 0f 
120: 10 44 24 00 48 83 c4 08 
128: f2 48 0f 2d f0 48 c1 e6 
136: 03 49 01 f2 5f 49 89 ba 
144: 10 00 00 00 49 29 f2 50 
152: f2 0f 10 44 24 00 48 83 
160: c4 08 f2 48 0f 2d f0 48 
168: c1 e6 03 49 01 f2 49 8b 
176: ba 00 00 00 00 57 49 29 
184: f2 50 f2 0f 10 44 24 00 
192: 48 83 c4 08 f2 48 0f 2d 
200: f0 48 c1 e6 03 49 01 f2 
208: 49 8b ba 08 00 00 00 57 
216: 49 29 f2 50 f2 0f 10 44 
224: 24 00 48 83 c4 08 f2 48 
232: 0f 2d f0 48 c1 e6 03 49 
240: 01 f2 49 8b ba 10 00 00 
248: 00 57 49 29 f2 48 be 00 
256: 00 00 00 00 00 10 40 56 
264: 50 f2 0f 10 44 24 00 f2 
272: 0f 10 4c 24 08 48 83 c4 
280: 08 f2 0f 58 c1 f2 0f 11 
288: 44 24 00 58 e8 8e 00 00 
296: 00 48 be 00 00 00 00 00 
304: 00 10 40 56 50 f2 0f 10 
312: 44 24 00 f2 0f 10 4c 24 
320: 08 48 83 c4 08 f2 0f 5c 
328: c1 f2 0f 11 44 24 00 58 
336: 50 f2 0f 10 44 24 00 48 
344: 83 c4 08 f2 48 0f 2d f0 
352: 48 c1 e6 03 49 01 f2 5f 
360: 49 89 ba 00 00 00 00 49 
368: 29 f2 50 f2 0f 10 44 24 
376: 00 48 83 c4 08 f2 48 0f 
384: 2d f0 48 c1 e6 03 49 01 
392: f2 49 8b ba 00 00 00 00 
400: 57 49 29 f2 f2 0f 10 44 
408: 24 00 41 52 53 52 51 50 
416: 49 89 e4 48 83 e4 f0 e8 
424: c0 28 0b fe 4c 89 e4 58 
432: 59 5a 5b 41 5a 5f c3 50 
440: f2 0f 10 44 24 00 48 83 
448: c4 08 f2 48 0f 2d f0 48 
456: c1 e6 03 49 01 f2 5f 49 
464: 89 ba 00 00 00 00 49 29 
472: f2 50 f2 0f 10 44 24 00 
480: 48 83 c4 08 f2 48 0f 2d 
488: f0 48 c1 e6 03 49 01 f2 
496: 5f 49 89 ba 08 00 00 00 
504: 49 29 f2 50 f2 0f 10 44 
512: 24 00 48 83 c4 08 f2 48 
520: 0f 2d f0 48 c1 e6 03 49 
528: 01 f2 5f 49 89 ba 10 00 
536: 00 00 49 29 f2 50 f2 0f 
544: 10 44 24 00 48 83 c4 08 
552: f2 48 0f 2d f0 48 c1 e6 
560: 03 49 01 f2 49 8b ba 08 
568: 00 00 00 57 49 29 f2 48 
576: be 00 00 00 00 00 00 f0 
584: 3f 56 f2 0f 10 44 24 00 
592: f2 0f 10 4c 24 08 48 83 
600: c4 08 f2 0f 58 c1 f2 0f 
608: 11 44 24 00 50 f2 0f 10 
616: 44 24 00 48 83 c4 08 f2 
624: 48 0f 2d f0 48 c1 e6 03 
632: 49 01 f2 5f 49 89 ba 08 
640: 00 00 00 49 29 f2 50 f2 
648: 0f 10 44 24 00 48 83 c4 
656: 08 f2 48 0f 2d f0 48 c1 
664: e6 03 49 01 f2 49 8b ba 
672: 10 00 00 00 57 49 29 f2 
680: 50 f2 0f 10 44 24 00 48 
688: 83 c4 08 f2 48 0f 2d f0 
696: 48 c1 e6 03 49 01 f2 49 
704: 8b ba 08 00 00 00 57 49 
712: 29 f2 f2 0f 10 44 24 00 
720: f2 0f 10 4c 24 08 48 83 
728: c4 08 f2 0f 59 c1 f2 0f 
736: 11 44 24 00 50 f2 0f 10 
744: 44 24 00 48 83 c4 08 f2 
752: 48 0f 2d f0 48 c1 e6 03 
760: 49 01 f2 5f 49 89 ba 10 
768: 00 00 00 49 29 f2 48 be 
776: 00 00 00 00 00 c0 5e 40 
784: 56 50 f2 0f 10 44 24 00 
792: 48 83 c4 08 f2 48 0f 2d 
800: f0 48 c1 e6 03 49 01 f2 
808: 5f 49 89 ba 18 00 00 00 
816: 49 29 f2 50 f2 0f 10 44 
824: 24 00 48 83 c4 08 f2 48 
832: 0f 2d f0 48 c1 e6 03 49 
840: 01 f2 49 8b ba 08 00 00 
848: 00 57 49 29 f2 50 f2 0f 
856: 10 44 24 00 48 83 c4 08 
864: f2 48 0f 2d f0 48 c1 e6 
872: 03 49 01 f2 49 8b ba 00 
880: 00 00 00 57 49 29 f2 f2 
888: 0f 10 44 24 00 f2 0f 10 
896: 4c 24 08 48 83 c4 10 66 
904: 0f 2e c1 0f 85 28 00 00 
912: 00 50 f2 0f 10 44 24 00 
920: 48 83 c4 08 f2 48 0f 2d 
928: f0 48 c1 e6 03 49 01 f2 
936: 49 8b ba 10 00 00 00 57 
944: 49 29 f2 c3 e9 db 00 00 
952: 00 50 f2 0f 10 44 24 00 
960: 48 83 c4 08 f2 48 0f 2d 
968: f0 48 c1 e6 03 49 01 f2 
976: 49 8b ba 10 00 00 00 57 
984: 49 29 f2 50 f2 0f 10 44 
992: 24 00 48 83 c4 08 f2 48 
1000: 0f 2d f0 48 c1 e6 03 49 
1008: 01 f2 49 8b ba 08 00 00 
1016: 00 57 49 29 f2 50 f2 0f 
1024: 10 44 24 00 48 83 c4 08 
1032: f2 48 0f 2d f0 48 c1 e6 
1040: 03 49 01 f2 49 8b ba 00 
1048: 00 00 00 57 49 29 f2 48 
1056: be 00 00 00 00 00 00 14 
1064: 40 56 50 f2 0f 10 44 24 
1072: 00 f2 0f 10 4c 24 08 48 
1080: 83 c4 08 f2 0f 58 c1 f2 
1088: 0f 11 44 24 00 58 e8 6c 
1096: fd ff ff 48 be 00 00 00 
1104: 00 00 00 14 40 56 50 f2 
1112: 0f 10 44 24 00 f2 0f 10 
1120: 4c 24 08 48 83 c4 08 f2 
1128: 0f 5c c1 f2 0f 11 44 24 
1136: 00 58 50 f2 0f 10 44 24 
1144: 00 48 83 c4 08 f2 48 0f 
1152: 2d f0 48 c1 e6 03 49 01 
1160: f2 5f 49 89 ba 10 00 00 
1168: 00 49 29 f2 50 f2 0f 10 
1176: 44 24 00 48 83 c4 08 f2 
1184: 48 0f 2d f0 48 c1 e6 03 
1192: 49 01 f2 49 8b ba 10 00 
1200: 00 00 57 49 29 f2 c3 c3 
1208: 00 

====== x86 buffer dump end =======

