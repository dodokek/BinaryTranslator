Ip   8:
	Id: 17
	Yeah, it is jump
Ip  18:
	Id: 18
Ip  19:
	Id: 6
Ip  29:
	Id: 1
Ip  39:
	Id: 1
Ip  49:
	Id: 6
Ip  59:
	Id: 16
Ip  60:
	Id: 6
Ip  70:
	Id: 16
Ip  71:
	Id: 6
Ip  81:
	Id: 16
Ip  82:
	Id: 6
Ip  92:
	Id: 1
Ip 102:
	Id: 1
Ip 112:
	Id: 2
Ip 113:
	Id: 1
Ip 123:
	Id: 2
Ip 124:
	Id: 1
Ip 134:
	Id: 1
Ip 144:
	Id: 2
Ip 145:
	Id: 4
Ip 146:
	Id: 6
Ip 156:
	Id: 1
Ip 166:
	Id: 7
Ip 167:
	Id: 1
Ip 177:
	Id: 1
Ip 187:
	Id: 15
	Yeah, it is jump
Ip 197:
	Id: 1
Ip 207:
	Id: 1
Ip 217:
	Id: 15
	Yeah, it is jump
Ip 227:
	Id: 1
Ip 237:
	Id: 7
Ip 238:
	Id: 6
Ip 248:
	Id: 1
Ip 258:
	Id: 18
Ip 259:
	Id: 9
	Yeah, it is jump
Ip 269:
	Id: 1
Ip 279:
	Id: 1
Ip 289:
	Id: 1
Ip 299:
	Id: 4
Ip 300:
	Id: 5
Ip 301:
	Id: 6
Ip 311:
	Id: 1
Ip 321:
	Id: 7
Ip 322:
	Id: 6
Ip 332:
	Id: 1
Ip 342:
	Id: 18
Ip 343:
	Id: 9
	Yeah, it is jump
Ip 353:
	Id: 1
Ip 363:
	Id: 6
Ip 373:
	Id: 1
Ip 383:
	Id: 1
Ip 393:
	Id: 15
	Yeah, it is jump
Ip 403:
	Id: 1
Ip 413:
	Id: 1
Ip 423:
	Id: 2
Ip 424:
	Id: 1
Ip 434:
	Id: 1
Ip 444:
	Id: 4
Ip 445:
	Id: 5
Ip 446:
	Id: 6
Ip 456:
	Id: 1
Ip 466:
	Id: 7
Ip 467:
	Id: 6
Ip 477:
	Id: 1
Ip 487:
	Id: 18
Ip 488:
	Id: 9
	Yeah, it is jump
Ip 498:
	Id: 1
Ip 508:
	Id: 1
Ip 518:
	Id: 12
	Yeah, it is jump
Ip 528:
	Id: 1
Ip 538:
	Id: 7
Ip 539:
	Id: 1
Ip 549:
	Id: 7
Ip 550:
	Id: 6
Ip 560:
	Id: 1
Ip 570:
	Id: 18
Ip 571:
	Id: 9
	Yeah, it is jump
Ip 581:
	Id: 1
Ip 591:
	Id: 1
Ip 601:
	Id: 2
Ip 602:
	Id: 1
Ip 612:
	Id: 1
Ip 622:
	Id: 4
Ip 623:
	Id: 1
Ip 633:
	Id: 19
Ip 634:
	Id: 3
Ip 635:
	Id: 5
Ip 636:
	Id: 6
Ip 646:
	Id: 1
Ip 656:
	Id: 1
Ip 666:
	Id: 2
Ip 667:
	Id: 1
Ip 677:
	Id: 19
Ip 678:
	Id: 1
Ip 688:
	Id: 1
Ip 698:
	Id: 4
Ip 699:
	Id: 4
Ip 700:
	Id: 5
Ip 701:
	Id: 6
Ip 711:
	Id: 1
Ip 721:
	Id: 7
Ip 722:
	Id: 1
Ip 732:
	Id: 7
Ip 733:
	Id: 6
Ip 743:
	Id: 1
Ip 753:
	Id: 18
Ip 754:
End of prog.

================ Begin of struct dump ==================

Command < CALL: 17 > | Native/x86 size: 10/5 | x86 ip: 0
	Yeah, it is jump
	+Wants to jump into 19

Command < RET: 18 > | Native/x86 size: 1/1 | x86 ip: 0

Command < POP: 6 > | Native/x86 size: 10/1 | x86 ip: 0
Checksum: 64
	+Using register, its id: 2

Command < PUSH: 1 > | Native/x86 size: 10/1 | x86 ip: 0
Checksum: 64
	+Using register, its id: 2

Command < PUSH: 1 > | Native/x86 size: 10/11 | x86 ip: 0
Checksum: 32
	+Operating width digit, value: 3802

Command < POP: 6 > | Native/x86 size: 10/34 | x86 ip: 0
Checksum: 224
	+Using register, its id: 0
	+Operating width digit, value: 0
--- Adresses to memory

Command < IN: 16 > | Native/x86 size: 1/33 | x86 ip: 0

Command < POP: 6 > | Native/x86 size: 10/34 | x86 ip: 0
Checksum: 224
	+Using register, its id: 0
	+Operating width digit, value: 1
--- Adresses to memory

Command < IN: 16 > | Native/x86 size: 1/33 | x86 ip: 0

Command < POP: 6 > | Native/x86 size: 10/34 | x86 ip: 0
Checksum: 224
	+Using register, its id: 0
	+Operating width digit, value: 2
--- Adresses to memory

Command < IN: 16 > | Native/x86 size: 1/33 | x86 ip: 0

Command < POP: 6 > | Native/x86 size: 10/34 | x86 ip: 0
Checksum: 224
	+Using register, its id: 0
	+Operating width digit, value: 3
--- Adresses to memory

Command < PUSH: 1 > | Native/x86 size: 10/11 | x86 ip: 0
Checksum: 32
	+Operating width digit, value: 4

Command < PUSH: 1 > | Native/x86 size: 10/34 | x86 ip: 0
Checksum: 224
	+Using register, its id: 0
	+Operating width digit, value: 1
--- Adresses to memory

Command < MUL: 2 > | Native/x86 size: 1/26 | x86 ip: 0

Command < PUSH: 1 > | Native/x86 size: 10/34 | x86 ip: 0
Checksum: 224
	+Using register, its id: 0
	+Operating width digit, value: 3
--- Adresses to memory

Command < MUL: 2 > | Native/x86 size: 1/26 | x86 ip: 0

Command < PUSH: 1 > | Native/x86 size: 10/34 | x86 ip: 0
Checksum: 224
	+Using register, its id: 0
	+Operating width digit, value: 2
--- Adresses to memory

Command < PUSH: 1 > | Native/x86 size: 10/34 | x86 ip: 0
Checksum: 224
	+Using register, its id: 0
	+Operating width digit, value: 2
--- Adresses to memory

Command < MUL: 2 > | Native/x86 size: 1/26 | x86 ip: 0

Command < SUB: 4 > | Native/x86 size: 1/26 | x86 ip: 0

Command < POP: 6 > | Native/x86 size: 10/34 | x86 ip: 0
Checksum: 224
	+Using register, its id: 0
	+Operating width digit, value: 4
--- Adresses to memory

Command < PUSH: 1 > | Native/x86 size: 10/34 | x86 ip: 0
Checksum: 224
	+Using register, its id: 0
	+Operating width digit, value: 4
--- Adresses to memory

Command < OUT: 7 > | Native/x86 size: 1/34 | x86 ip: 0

Command < PUSH: 1 > | Native/x86 size: 10/34 | x86 ip: 0
Checksum: 224
	+Using register, its id: 0
	+Operating width digit, value: 1
--- Adresses to memory

Command < PUSH: 1 > | Native/x86 size: 10/11 | x86 ip: 0
Checksum: 32
	+Operating width digit, value: 0

Command < JNE: 15 > | Native/x86 size: 10/26 | x86 ip: 0
	Yeah, it is jump
	+Wants to jump into 353

Command < PUSH: 1 > | Native/x86 size: 10/34 | x86 ip: 0
Checksum: 224
	+Using register, its id: 0
	+Operating width digit, value: 2
--- Adresses to memory

Command < PUSH: 1 > | Native/x86 size: 10/11 | x86 ip: 0
Checksum: 32
	+Operating width digit, value: 0

Command < JNE: 15 > | Native/x86 size: 10/26 | x86 ip: 0
	Yeah, it is jump
	+Wants to jump into 269

Command < PUSH: 1 > | Native/x86 size: 10/34 | x86 ip: 0
Checksum: 224
	+Using register, its id: 0
	+Operating width digit, value: 0
--- Adresses to memory

Command < OUT: 7 > | Native/x86 size: 1/34 | x86 ip: 0

Command < POP: 6 > | Native/x86 size: 10/1 | x86 ip: 0
Checksum: 64
	+Using register, its id: 2

Command < PUSH: 1 > | Native/x86 size: 10/1 | x86 ip: 0
Checksum: 64
	+Using register, its id: 2

Command < RET: 18 > | Native/x86 size: 1/1 | x86 ip: 0

Command < JMP: 9 > | Native/x86 size: 10/5 | x86 ip: 0
	Yeah, it is jump
	+Wants to jump into 343

Command < PUSH: 1 > | Native/x86 size: 10/34 | x86 ip: 0
Checksum: 224
	+Using register, its id: 0
	+Operating width digit, value: 2
--- Adresses to memory

Command < PUSH: 1 > | Native/x86 size: 10/34 | x86 ip: 0
Checksum: 224
	+Using register, its id: 0
	+Operating width digit, value: 3
--- Adresses to memory

Command < PUSH: 1 > | Native/x86 size: 10/11 | x86 ip: 0
Checksum: 32
	+Operating width digit, value: 0

Command < SUB: 4 > | Native/x86 size: 1/26 | x86 ip: 0

Command < DIV: 5 > | Native/x86 size: 1/26 | x86 ip: 0

Command < POP: 6 > | Native/x86 size: 10/34 | x86 ip: 0
Checksum: 224
	+Using register, its id: 0
	+Operating width digit, value: 5
--- Adresses to memory

Command < PUSH: 1 > | Native/x86 size: 10/34 | x86 ip: 0
Checksum: 224
	+Using register, its id: 0
	+Operating width digit, value: 5
--- Adresses to memory

Command < OUT: 7 > | Native/x86 size: 1/34 | x86 ip: 0

Command < POP: 6 > | Native/x86 size: 10/1 | x86 ip: 0
Checksum: 64
	+Using register, its id: 2

Command < PUSH: 1 > | Native/x86 size: 10/1 | x86 ip: 0
Checksum: 64
	+Using register, its id: 2

Command < RET: 18 > | Native/x86 size: 1/1 | x86 ip: 0

Command < JMP: 9 > | Native/x86 size: 10/5 | x86 ip: 0
	Yeah, it is jump
	+Wants to jump into 373

Command < PUSH: 1 > | Native/x86 size: 10/11 | x86 ip: 0
Checksum: 32
	+Operating width digit, value: 1337

Command < POP: 6 > | Native/x86 size: 10/34 | x86 ip: 0
Checksum: 224
	+Using register, its id: 0
	+Operating width digit, value: 6
--- Adresses to memory

Command < PUSH: 1 > | Native/x86 size: 10/34 | x86 ip: 0
Checksum: 224
	+Using register, its id: 0
	+Operating width digit, value: 4
--- Adresses to memory

Command < PUSH: 1 > | Native/x86 size: 10/11 | x86 ip: 0
Checksum: 32
	+Operating width digit, value: 0

Command < JNE: 15 > | Native/x86 size: 10/26 | x86 ip: 0
	Yeah, it is jump
	+Wants to jump into 498

Command < PUSH: 1 > | Native/x86 size: 10/34 | x86 ip: 0
Checksum: 224
	+Using register, its id: 0
	+Operating width digit, value: 1
--- Adresses to memory

Command < PUSH: 1 > | Native/x86 size: 10/11 | x86 ip: 0
Checksum: 32
	+Operating width digit, value: 2

Command < MUL: 2 > | Native/x86 size: 1/26 | x86 ip: 0

Command < PUSH: 1 > | Native/x86 size: 10/34 | x86 ip: 0
Checksum: 224
	+Using register, its id: 0
	+Operating width digit, value: 2
--- Adresses to memory

Command < PUSH: 1 > | Native/x86 size: 10/11 | x86 ip: 0
Checksum: 32
	+Operating width digit, value: 0

Command < SUB: 4 > | Native/x86 size: 1/26 | x86 ip: 0

Command < DIV: 5 > | Native/x86 size: 1/26 | x86 ip: 0

Command < POP: 6 > | Native/x86 size: 10/34 | x86 ip: 0
Checksum: 224
	+Using register, its id: 0
	+Operating width digit, value: 5
--- Adresses to memory

Command < PUSH: 1 > | Native/x86 size: 10/34 | x86 ip: 0
Checksum: 224
	+Using register, its id: 0
	+Operating width digit, value: 5
--- Adresses to memory

Command < OUT: 7 > | Native/x86 size: 1/34 | x86 ip: 0

Command < POP: 6 > | Native/x86 size: 10/1 | x86 ip: 0
Checksum: 64
	+Using register, its id: 2

Command < PUSH: 1 > | Native/x86 size: 10/1 | x86 ip: 0
Checksum: 64
	+Using register, its id: 2

Command < RET: 18 > | Native/x86 size: 1/1 | x86 ip: 0

Command < JMP: 9 > | Native/x86 size: 10/5 | x86 ip: 0
	Yeah, it is jump
	+Wants to jump into 498

Command < PUSH: 1 > | Native/x86 size: 10/11 | x86 ip: 0
Checksum: 32
	+Operating width digit, value: 0

Command < PUSH: 1 > | Native/x86 size: 10/34 | x86 ip: 0
Checksum: 224
	+Using register, its id: 0
	+Operating width digit, value: 4
--- Adresses to memory

Command < JA: 12 > | Native/x86 size: 10/26 | x86 ip: 0
	Yeah, it is jump
	+Wants to jump into 581

Command < PUSH: 1 > | Native/x86 size: 10/34 | x86 ip: 0
Checksum: 224
	+Using register, its id: 0
	+Operating width digit, value: 6
--- Adresses to memory

Command < OUT: 7 > | Native/x86 size: 1/34 | x86 ip: 0

Command < PUSH: 1 > | Native/x86 size: 10/34 | x86 ip: 0
Checksum: 224
	+Using register, its id: 0
	+Operating width digit, value: 6
--- Adresses to memory

Command < OUT: 7 > | Native/x86 size: 1/34 | x86 ip: 0

Command < POP: 6 > | Native/x86 size: 10/1 | x86 ip: 0
Checksum: 64
	+Using register, its id: 2

Command < PUSH: 1 > | Native/x86 size: 10/1 | x86 ip: 0
Checksum: 64
	+Using register, its id: 2

Command < RET: 18 > | Native/x86 size: 1/1 | x86 ip: 0

Command < JMP: 9 > | Native/x86 size: 10/5 | x86 ip: 0
	Yeah, it is jump
	+Wants to jump into 733

Command < PUSH: 1 > | Native/x86 size: 10/11 | x86 ip: 0
Checksum: 32
	+Operating width digit, value: 2

Command < PUSH: 1 > | Native/x86 size: 10/34 | x86 ip: 0
Checksum: 224
	+Using register, its id: 0
	+Operating width digit, value: 1
--- Adresses to memory

Command < MUL: 2 > | Native/x86 size: 1/26 | x86 ip: 0

Command < PUSH: 1 > | Native/x86 size: 10/34 | x86 ip: 0
Checksum: 224
	+Using register, its id: 0
	+Operating width digit, value: 2
--- Adresses to memory

Command < PUSH: 1 > | Native/x86 size: 10/11 | x86 ip: 0
Checksum: 32
	+Operating width digit, value: 0

Command < SUB: 4 > | Native/x86 size: 1/26 | x86 ip: 0

Command < PUSH: 1 > | Native/x86 size: 10/34 | x86 ip: 0
Checksum: 224
	+Using register, its id: 0
	+Operating width digit, value: 4
--- Adresses to memory

Command < SQR: 19 > | Native/x86 size: 1/16 | x86 ip: 0

Command < ADD: 3 > | Native/x86 size: 1/26 | x86 ip: 0

Command < DIV: 5 > | Native/x86 size: 1/26 | x86 ip: 0

Command < POP: 6 > | Native/x86 size: 10/34 | x86 ip: 0
Checksum: 224
	+Using register, its id: 0
	+Operating width digit, value: 7
--- Adresses to memory

Command < PUSH: 1 > | Native/x86 size: 10/11 | x86 ip: 0
Checksum: 32
	+Operating width digit, value: 2

Command < PUSH: 1 > | Native/x86 size: 10/34 | x86 ip: 0
Checksum: 224
	+Using register, its id: 0
	+Operating width digit, value: 1
--- Adresses to memory

Command < MUL: 2 > | Native/x86 size: 1/26 | x86 ip: 0

Command < PUSH: 1 > | Native/x86 size: 10/34 | x86 ip: 0
Checksum: 224
	+Using register, its id: 0
	+Operating width digit, value: 4
--- Adresses to memory

Command < SQR: 19 > | Native/x86 size: 1/16 | x86 ip: 0

Command < PUSH: 1 > | Native/x86 size: 10/34 | x86 ip: 0
Checksum: 224
	+Using register, its id: 0
	+Operating width digit, value: 2
--- Adresses to memory

Command < PUSH: 1 > | Native/x86 size: 10/11 | x86 ip: 0
Checksum: 32
	+Operating width digit, value: 0

Command < SUB: 4 > | Native/x86 size: 1/26 | x86 ip: 0

Command < SUB: 4 > | Native/x86 size: 1/26 | x86 ip: 0

Command < DIV: 5 > | Native/x86 size: 1/26 | x86 ip: 0

Command < POP: 6 > | Native/x86 size: 10/34 | x86 ip: 0
Checksum: 224
	+Using register, its id: 0
	+Operating width digit, value: 8
--- Adresses to memory

Command < PUSH: 1 > | Native/x86 size: 10/34 | x86 ip: 0
Checksum: 224
	+Using register, its id: 0
	+Operating width digit, value: 7
--- Adresses to memory

Command < OUT: 7 > | Native/x86 size: 1/34 | x86 ip: 0

Command < PUSH: 1 > | Native/x86 size: 10/34 | x86 ip: 0
Checksum: 224
	+Using register, its id: 0
	+Operating width digit, value: 8
--- Adresses to memory

Command < OUT: 7 > | Native/x86 size: 1/34 | x86 ip: 0

Command < POP: 6 > | Native/x86 size: 10/1 | x86 ip: 0
Checksum: 64
	+Using register, its id: 2

Command < PUSH: 1 > | Native/x86 size: 10/1 | x86 ip: 0
Checksum: 64
	+Using register, its id: 2

Command < RET: 18 > | Native/x86 size: 1/1 | x86 ip: 0

================ End of struct dump ==================

Optimization attempt: mov r?x, num
Optimization attempt: mov r?x, num
Optimization attempt: constant arithmetics
Optimization attempt: constant arithmetics
Optimization attempt: constant arithmetics
Optimization attempt: constant arithmetics
Optimization attempt: mov r?x, num
Optimization attempt: mov r?x, num
Optimization attempt: mov r?x, num
Optimization attempt: constant arithmetics
Optimization attempt: constant arithmetics
Optimization attempt: mov r?x, num
Optimization attempt: mov r?x, num
Optimization attempt: mov r?x, num
Optimization attempt: constant arithmetics
Optimization attempt: mov r?x, num
Optimization attempt: constant arithmetics
Optimization attempt: constant arithmetics
Optimization attempt: mov r?x, num
Optimization attempt: mov r?x, num
Optimization attempt: constant arithmetics
Optimization attempt: mov r?x, num
Optimization attempt: constant arithmetics
Optimization attempt: constant arithmetics
Optimization attempt: constant arithmetics
Optimization attempt: mov r?x, num
Optimization attempt: constant arithmetics
Optimization attempt: mov r?x, num
Optimization attempt: constant arithmetics
Optimization attempt: constant arithmetics
Optimization attempt: constant arithmetics


---------- Filling labels --------

	Yeah, it is jump
 0: Trying to find x86 ip for ip 19:
	 Found, x86 ip is 6
	Yeah, it is jump
26: Trying to find x86 ip for ip 353:
	 Found, x86 ip is 1066
	Yeah, it is jump
29: Trying to find x86 ip for ip 269:
	 Found, x86 ip is 825
	Yeah, it is jump
35: Trying to find x86 ip for ip 343:
	 Found, x86 ip is 1061
	Yeah, it is jump
47: Trying to find x86 ip for ip 373:
	 Found, x86 ip is 1111
	Yeah, it is jump
52: Trying to find x86 ip for ip 498:
	 Found, x86 ip is 1460
	Yeah, it is jump
66: Trying to find x86 ip for ip 498:
	 Found, x86 ip is 1460
	Yeah, it is jump
69: Trying to find x86 ip for ip 581:
	 Found, x86 ip is 1675
	Yeah, it is jump
77: Trying to find x86 ip for ip 733:
	 Found, x86 ip is 2367


---------- End filling labels --------


================ Begin of struct dump ==================

Command < CALL: 17 > | Native/x86 size: 10/5 | x86 ip: 0
	Yeah, it is jump
	+Wants to jump into 6

Command < RET: 18 > | Native/x86 size: 1/1 | x86 ip: 5

Command < POP: 6 > | Native/x86 size: 10/1 | x86 ip: 6
Checksum: 64
	+Using register, its id: 2

Command < PUSH: 1 > | Native/x86 size: 10/1 | x86 ip: 7
Checksum: 64
	+Using register, its id: 2

Command < PUSH: 1 > | Native/x86 size: 10/11 | x86 ip: 8
Checksum: 32
	+Operating width digit, value: 3802

Command < POP: 6 > | Native/x86 size: 10/34 | x86 ip: 19
Checksum: 224
	+Using register, its id: 0
	+Operating width digit, value: 0
--- Adresses to memory

Command < IN: 16 > | Native/x86 size: 1/33 | x86 ip: 53

Command < POP: 6 > | Native/x86 size: 10/34 | x86 ip: 86
Checksum: 224
	+Using register, its id: 0
	+Operating width digit, value: 1
--- Adresses to memory

Command < IN: 16 > | Native/x86 size: 1/33 | x86 ip: 120

Command < POP: 6 > | Native/x86 size: 10/34 | x86 ip: 153
Checksum: 224
	+Using register, its id: 0
	+Operating width digit, value: 2
--- Adresses to memory

Command < IN: 16 > | Native/x86 size: 1/33 | x86 ip: 187

Command < POP: 6 > | Native/x86 size: 10/34 | x86 ip: 220
Checksum: 224
	+Using register, its id: 0
	+Operating width digit, value: 3
--- Adresses to memory

Command < PUSH: 1 > | Native/x86 size: 10/11 | x86 ip: 254
Checksum: 32
	+Operating width digit, value: 4

Command < PUSH: 1 > | Native/x86 size: 10/34 | x86 ip: 265
Checksum: 224
	+Using register, its id: 0
	+Operating width digit, value: 1
--- Adresses to memory

Command < MUL: 2 > | Native/x86 size: 1/26 | x86 ip: 299

Command < PUSH: 1 > | Native/x86 size: 10/34 | x86 ip: 325
Checksum: 224
	+Using register, its id: 0
	+Operating width digit, value: 3
--- Adresses to memory

Command < MUL: 2 > | Native/x86 size: 1/26 | x86 ip: 359

Command < PUSH: 1 > | Native/x86 size: 10/34 | x86 ip: 385
Checksum: 224
	+Using register, its id: 0
	+Operating width digit, value: 2
--- Adresses to memory

Command < PUSH: 1 > | Native/x86 size: 10/34 | x86 ip: 419
Checksum: 224
	+Using register, its id: 0
	+Operating width digit, value: 2
--- Adresses to memory

Command < MUL: 2 > | Native/x86 size: 1/26 | x86 ip: 453

Command < SUB: 4 > | Native/x86 size: 1/26 | x86 ip: 479

Command < POP: 6 > | Native/x86 size: 10/34 | x86 ip: 505
Checksum: 224
	+Using register, its id: 0
	+Operating width digit, value: 4
--- Adresses to memory

Command < PUSH: 1 > | Native/x86 size: 10/34 | x86 ip: 539
Checksum: 224
	+Using register, its id: 0
	+Operating width digit, value: 4
--- Adresses to memory

Command < OUT: 7 > | Native/x86 size: 1/34 | x86 ip: 573

Command < PUSH: 1 > | Native/x86 size: 10/34 | x86 ip: 607
Checksum: 224
	+Using register, its id: 0
	+Operating width digit, value: 1
--- Adresses to memory

Command < PUSH: 1 > | Native/x86 size: 10/11 | x86 ip: 641
Checksum: 32
	+Operating width digit, value: 0

Command < JNE: 15 > | Native/x86 size: 10/26 | x86 ip: 652
	Yeah, it is jump
	+Wants to jump into 1066

Command < PUSH: 1 > | Native/x86 size: 10/34 | x86 ip: 678
Checksum: 224
	+Using register, its id: 0
	+Operating width digit, value: 2
--- Adresses to memory

Command < PUSH: 1 > | Native/x86 size: 10/11 | x86 ip: 712
Checksum: 32
	+Operating width digit, value: 0

Command < JNE: 15 > | Native/x86 size: 10/26 | x86 ip: 723
	Yeah, it is jump
	+Wants to jump into 825

Command < PUSH: 1 > | Native/x86 size: 10/34 | x86 ip: 749
Checksum: 224
	+Using register, its id: 0
	+Operating width digit, value: 0
--- Adresses to memory

Command < OUT: 7 > | Native/x86 size: 1/34 | x86 ip: 783

Command < POP: 6 > | Native/x86 size: 10/1 | x86 ip: 817
Checksum: 64
	+Using register, its id: 2

Command < PUSH: 1 > | Native/x86 size: 10/1 | x86 ip: 818
Checksum: 64
	+Using register, its id: 2

Command < RET: 18 > | Native/x86 size: 1/1 | x86 ip: 819

Command < JMP: 9 > | Native/x86 size: 10/5 | x86 ip: 820
	Yeah, it is jump
	+Wants to jump into 1061

Command < PUSH: 1 > | Native/x86 size: 10/34 | x86 ip: 825
Checksum: 224
	+Using register, its id: 0
	+Operating width digit, value: 2
--- Adresses to memory

Command < PUSH: 1 > | Native/x86 size: 10/34 | x86 ip: 859
Checksum: 224
	+Using register, its id: 0
	+Operating width digit, value: 3
--- Adresses to memory

Command < PUSH: 1 > | Native/x86 size: 10/11 | x86 ip: 893
Checksum: 32
	+Operating width digit, value: 0

Command < SUB: 4 > | Native/x86 size: 1/26 | x86 ip: 904

Command < DIV: 5 > | Native/x86 size: 1/26 | x86 ip: 930

Command < POP: 6 > | Native/x86 size: 10/34 | x86 ip: 956
Checksum: 224
	+Using register, its id: 0
	+Operating width digit, value: 5
--- Adresses to memory

Command < PUSH: 1 > | Native/x86 size: 10/34 | x86 ip: 990
Checksum: 224
	+Using register, its id: 0
	+Operating width digit, value: 5
--- Adresses to memory

Command < OUT: 7 > | Native/x86 size: 1/34 | x86 ip: 1024

Command < POP: 6 > | Native/x86 size: 10/1 | x86 ip: 1058
Checksum: 64
	+Using register, its id: 2

Command < PUSH: 1 > | Native/x86 size: 10/1 | x86 ip: 1059
Checksum: 64
	+Using register, its id: 2

Command < RET: 18 > | Native/x86 size: 1/1 | x86 ip: 1060

Command < JMP: 9 > | Native/x86 size: 10/5 | x86 ip: 1061
	Yeah, it is jump
	+Wants to jump into 1111

Command < PUSH: 1 > | Native/x86 size: 10/11 | x86 ip: 1066
Checksum: 32
	+Operating width digit, value: 1337

Command < POP: 6 > | Native/x86 size: 10/34 | x86 ip: 1077
Checksum: 224
	+Using register, its id: 0
	+Operating width digit, value: 6
--- Adresses to memory

Command < PUSH: 1 > | Native/x86 size: 10/34 | x86 ip: 1111
Checksum: 224
	+Using register, its id: 0
	+Operating width digit, value: 4
--- Adresses to memory

Command < PUSH: 1 > | Native/x86 size: 10/11 | x86 ip: 1145
Checksum: 32
	+Operating width digit, value: 0

Command < JNE: 15 > | Native/x86 size: 10/26 | x86 ip: 1156
	Yeah, it is jump
	+Wants to jump into 1460

Command < PUSH: 1 > | Native/x86 size: 10/34 | x86 ip: 1182
Checksum: 224
	+Using register, its id: 0
	+Operating width digit, value: 1
--- Adresses to memory

Command < PUSH: 1 > | Native/x86 size: 10/11 | x86 ip: 1216
Checksum: 32
	+Operating width digit, value: 2

Command < MUL: 2 > | Native/x86 size: 1/26 | x86 ip: 1227

Command < PUSH: 1 > | Native/x86 size: 10/34 | x86 ip: 1253
Checksum: 224
	+Using register, its id: 0
	+Operating width digit, value: 2
--- Adresses to memory

Command < PUSH: 1 > | Native/x86 size: 10/11 | x86 ip: 1287
Checksum: 32
	+Operating width digit, value: 0

Command < SUB: 4 > | Native/x86 size: 1/26 | x86 ip: 1298

Command < DIV: 5 > | Native/x86 size: 1/26 | x86 ip: 1324

Command < POP: 6 > | Native/x86 size: 10/34 | x86 ip: 1350
Checksum: 224
	+Using register, its id: 0
	+Operating width digit, value: 5
--- Adresses to memory

Command < PUSH: 1 > | Native/x86 size: 10/34 | x86 ip: 1384
Checksum: 224
	+Using register, its id: 0
	+Operating width digit, value: 5
--- Adresses to memory

Command < OUT: 7 > | Native/x86 size: 1/34 | x86 ip: 1418

Command < POP: 6 > | Native/x86 size: 10/1 | x86 ip: 1452
Checksum: 64
	+Using register, its id: 2

Command < PUSH: 1 > | Native/x86 size: 10/1 | x86 ip: 1453
Checksum: 64
	+Using register, its id: 2

Command < RET: 18 > | Native/x86 size: 1/1 | x86 ip: 1454

Command < JMP: 9 > | Native/x86 size: 10/5 | x86 ip: 1455
	Yeah, it is jump
	+Wants to jump into 1460

Command < PUSH: 1 > | Native/x86 size: 10/11 | x86 ip: 1460
Checksum: 32
	+Operating width digit, value: 0

Command < PUSH: 1 > | Native/x86 size: 10/34 | x86 ip: 1471
Checksum: 224
	+Using register, its id: 0
	+Operating width digit, value: 4
--- Adresses to memory

Command < JA: 12 > | Native/x86 size: 10/26 | x86 ip: 1505
	Yeah, it is jump
	+Wants to jump into 1675

Command < PUSH: 1 > | Native/x86 size: 10/34 | x86 ip: 1531
Checksum: 224
	+Using register, its id: 0
	+Operating width digit, value: 6
--- Adresses to memory

Command < OUT: 7 > | Native/x86 size: 1/34 | x86 ip: 1565

Command < PUSH: 1 > | Native/x86 size: 10/34 | x86 ip: 1599
Checksum: 224
	+Using register, its id: 0
	+Operating width digit, value: 6
--- Adresses to memory

Command < OUT: 7 > | Native/x86 size: 1/34 | x86 ip: 1633

Command < POP: 6 > | Native/x86 size: 10/1 | x86 ip: 1667
Checksum: 64
	+Using register, its id: 2

Command < PUSH: 1 > | Native/x86 size: 10/1 | x86 ip: 1668
Checksum: 64
	+Using register, its id: 2

Command < RET: 18 > | Native/x86 size: 1/1 | x86 ip: 1669

Command < JMP: 9 > | Native/x86 size: 10/5 | x86 ip: 1670
	Yeah, it is jump
	+Wants to jump into 2367

Command < PUSH: 1 > | Native/x86 size: 10/11 | x86 ip: 1675
Checksum: 32
	+Operating width digit, value: 2

Command < PUSH: 1 > | Native/x86 size: 10/34 | x86 ip: 1686
Checksum: 224
	+Using register, its id: 0
	+Operating width digit, value: 1
--- Adresses to memory

Command < MUL: 2 > | Native/x86 size: 1/26 | x86 ip: 1720

Command < PUSH: 1 > | Native/x86 size: 10/34 | x86 ip: 1746
Checksum: 224
	+Using register, its id: 0
	+Operating width digit, value: 2
--- Adresses to memory

Command < PUSH: 1 > | Native/x86 size: 10/11 | x86 ip: 1780
Checksum: 32
	+Operating width digit, value: 0

Command < SUB: 4 > | Native/x86 size: 1/26 | x86 ip: 1791

Command < PUSH: 1 > | Native/x86 size: 10/34 | x86 ip: 1817
Checksum: 224
	+Using register, its id: 0
	+Operating width digit, value: 4
--- Adresses to memory

Command < SQR: 19 > | Native/x86 size: 1/16 | x86 ip: 1851

Command < ADD: 3 > | Native/x86 size: 1/26 | x86 ip: 1867

Command < DIV: 5 > | Native/x86 size: 1/26 | x86 ip: 1893

Command < POP: 6 > | Native/x86 size: 10/34 | x86 ip: 1919
Checksum: 224
	+Using register, its id: 0
	+Operating width digit, value: 7
--- Adresses to memory

Command < PUSH: 1 > | Native/x86 size: 10/11 | x86 ip: 1953
Checksum: 32
	+Operating width digit, value: 2

Command < PUSH: 1 > | Native/x86 size: 10/34 | x86 ip: 1964
Checksum: 224
	+Using register, its id: 0
	+Operating width digit, value: 1
--- Adresses to memory

Command < MUL: 2 > | Native/x86 size: 1/26 | x86 ip: 1998

Command < PUSH: 1 > | Native/x86 size: 10/34 | x86 ip: 2024
Checksum: 224
	+Using register, its id: 0
	+Operating width digit, value: 4
--- Adresses to memory

Command < SQR: 19 > | Native/x86 size: 1/16 | x86 ip: 2058

Command < PUSH: 1 > | Native/x86 size: 10/34 | x86 ip: 2074
Checksum: 224
	+Using register, its id: 0
	+Operating width digit, value: 2
--- Adresses to memory

Command < PUSH: 1 > | Native/x86 size: 10/11 | x86 ip: 2108
Checksum: 32
	+Operating width digit, value: 0

Command < SUB: 4 > | Native/x86 size: 1/26 | x86 ip: 2119

Command < SUB: 4 > | Native/x86 size: 1/26 | x86 ip: 2145

Command < DIV: 5 > | Native/x86 size: 1/26 | x86 ip: 2171

Command < POP: 6 > | Native/x86 size: 10/34 | x86 ip: 2197
Checksum: 224
	+Using register, its id: 0
	+Operating width digit, value: 8
--- Adresses to memory

Command < PUSH: 1 > | Native/x86 size: 10/34 | x86 ip: 2231
Checksum: 224
	+Using register, its id: 0
	+Operating width digit, value: 7
--- Adresses to memory

Command < OUT: 7 > | Native/x86 size: 1/34 | x86 ip: 2265

Command < PUSH: 1 > | Native/x86 size: 10/34 | x86 ip: 2299
Checksum: 224
	+Using register, its id: 0
	+Operating width digit, value: 8
--- Adresses to memory

Command < OUT: 7 > | Native/x86 size: 1/34 | x86 ip: 2333

Command < POP: 6 > | Native/x86 size: 10/1 | x86 ip: 2367
Checksum: 64
	+Using register, its id: 2

Command < PUSH: 1 > | Native/x86 size: 10/1 | x86 ip: 2368
Checksum: 64
	+Using register, its id: 2

Command < RET: 18 > | Native/x86 size: 1/1 | x86 ip: 2369

================ End of struct dump ==================

---------- Begin translation -------------

##########
	 0: 49 ba 
##########

Translating Jump or Call
##########
	 0: e8 
##########

Translating RET
##########
	 0: c3 
##########

6:Push/Pop REG

##########
	 0: 5a 
##########

7:Push/Pop REG

##########
	 0: 52 
##########

<8>:Push IMM

##########
	 0: 48 be 
##########


##########
	 0: 56 
##########

Translating push ram

##########
	 0: 50 
##########


##########
	 0: f2 0f 10 44 24 00 
##########


##########
	 0: 48 83 c4 08 
##########


##########
	 0: f2 48 0f 2d f0 
##########


##########
	 0: 48 c1 e6 03 
##########


##########
	 0: 49 01 f2 
##########


##########
	 0: 5f 
##########


##########
	 0: 49 89 ba 
##########


##########
	 0: 49 29 f2 
##########

Translating IN
##########
	 0: 57 
##########


##########
	 0: 48 8d 7c 24 00 
##########


##########
	 0: 41 52 53 52 51 50 
##########


##########
	 0: 49 89 e4 
##########


##########
	 0: 48 83 e4 f0 
##########


##########
	 0: e8 
##########


##########
	 0: 4c 89 e4 
##########


##########
	 0: 58 59 5a 5b 41 5a 
##########

Translating push ram

##########
	 0: 50 
##########


##########
	 0: f2 0f 10 44 24 00 
##########


##########
	 0: 48 83 c4 08 
##########


##########
	 0: f2 48 0f 2d f0 
##########


##########
	 0: 48 c1 e6 03 
##########


##########
	 0: 49 01 f2 
##########


##########
	 0: 5f 
##########


##########
	 0: 49 89 ba 
##########


##########
	 0: 49 29 f2 
##########

Translating IN
##########
	 0: 57 
##########


##########
	 0: 48 8d 7c 24 00 
##########


##########
	 0: 41 52 53 52 51 50 
##########


##########
	 0: 49 89 e4 
##########


##########
	 0: 48 83 e4 f0 
##########


##########
	 0: e8 
##########


##########
	 0: 4c 89 e4 
##########


##########
	 0: 58 59 5a 5b 41 5a 
##########

Translating push ram

##########
	 0: 50 
##########


##########
	 0: f2 0f 10 44 24 00 
##########


##########
	 0: 48 83 c4 08 
##########


##########
	 0: f2 48 0f 2d f0 
##########


##########
	 0: 48 c1 e6 03 
##########


##########
	 0: 49 01 f2 
##########


##########
	 0: 5f 
##########


##########
	 0: 49 89 ba 
##########


##########
	 0: 49 29 f2 
##########

Translating IN
##########
	 0: 57 
##########


##########
	 0: 48 8d 7c 24 00 
##########


##########
	 0: 41 52 53 52 51 50 
##########


##########
	 0: 49 89 e4 
##########


##########
	 0: 48 83 e4 f0 
##########


##########
	 0: e8 
##########


##########
	 0: 4c 89 e4 
##########


##########
	 0: 58 59 5a 5b 41 5a 
##########

Translating push ram

##########
	 0: 50 
##########


##########
	 0: f2 0f 10 44 24 00 
##########


##########
	 0: 48 83 c4 08 
##########


##########
	 0: f2 48 0f 2d f0 
##########


##########
	 0: 48 c1 e6 03 
##########


##########
	 0: 49 01 f2 
##########


##########
	 0: 5f 
##########


##########
	 0: 49 89 ba 
##########


##########
	 0: 49 29 f2 
##########

<254>:Push IMM

##########
	 0: 48 be 
##########


##########
	 0: 56 
##########

Translating push ram

##########
	 0: 50 
##########


##########
	 0: f2 0f 10 44 24 00 
##########


##########
	 0: 48 83 c4 08 
##########


##########
	 0: f2 48 0f 2d f0 
##########


##########
	 0: 48 c1 e6 03 
##########


##########
	 0: 49 01 f2 
##########


##########
	 0: 49 8b ba 
##########


##########
	 0: 57 
##########


##########
	 0: 49 29 f2 
##########

14: Translating math

##########
	 0: f2 0f 10 44 24 00 
##########


##########
	 0: f2 0f 10 4c 24 08 
##########


##########
	 0: 48 83 c4 08 
##########


##########
	 0: f2 0f 59 c1 
##########


##########
	 0: f2 0f 11 44 24 00 
##########

Translating push ram

##########
	 0: 50 
##########


##########
	 0: f2 0f 10 44 24 00 
##########


##########
	 0: 48 83 c4 08 
##########


##########
	 0: f2 48 0f 2d f0 
##########


##########
	 0: 48 c1 e6 03 
##########


##########
	 0: 49 01 f2 
##########


##########
	 0: 49 8b ba 
##########


##########
	 0: 57 
##########


##########
	 0: 49 29 f2 
##########

16: Translating math

##########
	 0: f2 0f 10 44 24 00 
##########


##########
	 0: f2 0f 10 4c 24 08 
##########


##########
	 0: 48 83 c4 08 
##########


##########
	 0: f2 0f 59 c1 
##########


##########
	 0: f2 0f 11 44 24 00 
##########

Translating push ram

##########
	 0: 50 
##########


##########
	 0: f2 0f 10 44 24 00 
##########


##########
	 0: 48 83 c4 08 
##########


##########
	 0: f2 48 0f 2d f0 
##########


##########
	 0: 48 c1 e6 03 
##########


##########
	 0: 49 01 f2 
##########


##########
	 0: 49 8b ba 
##########


##########
	 0: 57 
##########


##########
	 0: 49 29 f2 
##########

Translating push ram

##########
	 0: 50 
##########


##########
	 0: f2 0f 10 44 24 00 
##########


##########
	 0: 48 83 c4 08 
##########


##########
	 0: f2 48 0f 2d f0 
##########


##########
	 0: 48 c1 e6 03 
##########


##########
	 0: 49 01 f2 
##########


##########
	 0: 49 8b ba 
##########


##########
	 0: 57 
##########


##########
	 0: 49 29 f2 
##########

19: Translating math

##########
	 0: f2 0f 10 44 24 00 
##########


##########
	 0: f2 0f 10 4c 24 08 
##########


##########
	 0: 48 83 c4 08 
##########


##########
	 0: f2 0f 59 c1 
##########


##########
	 0: f2 0f 11 44 24 00 
##########

20: Translating math

##########
	 0: f2 0f 10 44 24 00 
##########


##########
	 0: f2 0f 10 4c 24 08 
##########


##########
	 0: 48 83 c4 08 
##########


##########
	 0: f2 0f 5c c1 
##########


##########
	 0: f2 0f 11 44 24 00 
##########

Translating push ram

##########
	 0: 50 
##########


##########
	 0: f2 0f 10 44 24 00 
##########


##########
	 0: 48 83 c4 08 
##########


##########
	 0: f2 48 0f 2d f0 
##########


##########
	 0: 48 c1 e6 03 
##########


##########
	 0: 49 01 f2 
##########


##########
	 0: 5f 
##########


##########
	 0: 49 89 ba 
##########


##########
	 0: 49 29 f2 
##########

Translating push ram

##########
	 0: 50 
##########


##########
	 0: f2 0f 10 44 24 00 
##########


##########
	 0: 48 83 c4 08 
##########


##########
	 0: f2 48 0f 2d f0 
##########


##########
	 0: 48 c1 e6 03 
##########


##########
	 0: 49 01 f2 
##########


##########
	 0: 49 8b ba 
##########


##########
	 0: 57 
##########


##########
	 0: 49 29 f2 
##########

Translating OUT
##########
	 0: f2 0f 10 44 24 00 
##########


##########
	 0: 41 52 53 52 51 50 
##########


##########
	 0: 49 89 e4 
##########


##########
	 0: 48 83 e4 f0 
##########


##########
	 0: e8 
##########


##########
	 0: 4c 89 e4 
##########


##########
	 0: 58 59 5a 5b 41 5a 
##########


##########
	 0: 5f 
##########

Translating push ram

##########
	 0: 50 
##########


##########
	 0: f2 0f 10 44 24 00 
##########


##########
	 0: 48 83 c4 08 
##########


##########
	 0: f2 48 0f 2d f0 
##########


##########
	 0: 48 c1 e6 03 
##########


##########
	 0: 49 01 f2 
##########


##########
	 0: 49 8b ba 
##########


##########
	 0: 57 
##########


##########
	 0: 49 29 f2 
##########

<641>:Push IMM

##########
	 0: 48 be 
##########


##########
	 0: 56 
##########

26: Translating jmp

##########
	 0: f2 0f 10 44 24 00 
##########


##########
	 0: f2 0f 10 4c 24 08 
##########


##########
	 0: 48 83 c4 10 
##########


##########
	 0: 66 0f 2e c1 
##########


##########
	 0: 0f 85 
##########

Translating push ram

##########
	 0: 50 
##########


##########
	 0: f2 0f 10 44 24 00 
##########


##########
	 0: 48 83 c4 08 
##########


##########
	 0: f2 48 0f 2d f0 
##########


##########
	 0: 48 c1 e6 03 
##########


##########
	 0: 49 01 f2 
##########


##########
	 0: 49 8b ba 
##########


##########
	 0: 57 
##########


##########
	 0: 49 29 f2 
##########

<712>:Push IMM

##########
	 0: 48 be 
##########


##########
	 0: 56 
##########

29: Translating jmp

##########
	 0: f2 0f 10 44 24 00 
##########


##########
	 0: f2 0f 10 4c 24 08 
##########


##########
	 0: 48 83 c4 10 
##########


##########
	 0: 66 0f 2e c1 
##########


##########
	 0: 0f 85 
##########

Translating push ram

##########
	 0: 50 
##########


##########
	 0: f2 0f 10 44 24 00 
##########


##########
	 0: 48 83 c4 08 
##########


##########
	 0: f2 48 0f 2d f0 
##########


##########
	 0: 48 c1 e6 03 
##########


##########
	 0: 49 01 f2 
##########


##########
	 0: 49 8b ba 
##########


##########
	 0: 57 
##########


##########
	 0: 49 29 f2 
##########

Translating OUT
##########
	 0: f2 0f 10 44 24 00 
##########


##########
	 0: 41 52 53 52 51 50 
##########


##########
	 0: 49 89 e4 
##########


##########
	 0: 48 83 e4 f0 
##########


##########
	 0: e8 
##########


##########
	 0: 4c 89 e4 
##########


##########
	 0: 58 59 5a 5b 41 5a 
##########


##########
	 0: 5f 
##########

817:Push/Pop REG

##########
	 0: 5a 
##########

818:Push/Pop REG

##########
	 0: 52 
##########

Translating RET
##########
	 0: c3 
##########

Translating Jump or Call
##########
	 0: e9 
##########

Translating push ram

##########
	 0: 50 
##########


##########
	 0: f2 0f 10 44 24 00 
##########


##########
	 0: 48 83 c4 08 
##########


##########
	 0: f2 48 0f 2d f0 
##########


##########
	 0: 48 c1 e6 03 
##########


##########
	 0: 49 01 f2 
##########


##########
	 0: 49 8b ba 
##########


##########
	 0: 57 
##########


##########
	 0: 49 29 f2 
##########

Translating push ram

##########
	 0: 50 
##########


##########
	 0: f2 0f 10 44 24 00 
##########


##########
	 0: 48 83 c4 08 
##########


##########
	 0: f2 48 0f 2d f0 
##########


##########
	 0: 48 c1 e6 03 
##########


##########
	 0: 49 01 f2 
##########


##########
	 0: 49 8b ba 
##########


##########
	 0: 57 
##########


##########
	 0: 49 29 f2 
##########

<893>:Push IMM

##########
	 0: 48 be 
##########


##########
	 0: 56 
##########

39: Translating math

##########
	 0: f2 0f 10 44 24 00 
##########


##########
	 0: f2 0f 10 4c 24 08 
##########


##########
	 0: 48 83 c4 08 
##########


##########
	 0: f2 0f 5c c1 
##########


##########
	 0: f2 0f 11 44 24 00 
##########

40: Translating math

##########
	 0: f2 0f 10 44 24 00 
##########


##########
	 0: f2 0f 10 4c 24 08 
##########


##########
	 0: 48 83 c4 08 
##########


##########
	 0: f2 0f 5e c1 
##########


##########
	 0: f2 0f 11 44 24 00 
##########

Translating push ram

##########
	 0: 50 
##########


##########
	 0: f2 0f 10 44 24 00 
##########


##########
	 0: 48 83 c4 08 
##########


##########
	 0: f2 48 0f 2d f0 
##########


##########
	 0: 48 c1 e6 03 
##########


##########
	 0: 49 01 f2 
##########


##########
	 0: 5f 
##########


##########
	 0: 49 89 ba 
##########


##########
	 0: 49 29 f2 
##########

Translating push ram

##########
	 0: 50 
##########


##########
	 0: f2 0f 10 44 24 00 
##########


##########
	 0: 48 83 c4 08 
##########


##########
	 0: f2 48 0f 2d f0 
##########


##########
	 0: 48 c1 e6 03 
##########


##########
	 0: 49 01 f2 
##########


##########
	 0: 49 8b ba 
##########


##########
	 0: 57 
##########


##########
	 0: 49 29 f2 
##########

Translating OUT
##########
	 0: f2 0f 10 44 24 00 
##########


##########
	 0: 41 52 53 52 51 50 
##########


##########
	 0: 49 89 e4 
##########


##########
	 0: 48 83 e4 f0 
##########


##########
	 0: e8 
##########


##########
	 0: 4c 89 e4 
##########


##########
	 0: 58 59 5a 5b 41 5a 
##########


##########
	 0: 5f 
##########

1058:Push/Pop REG

##########
	 0: 5a 
##########

1059:Push/Pop REG

##########
	 0: 52 
##########

Translating RET
##########
	 0: c3 
##########

Translating Jump or Call
##########
	 0: e9 
##########

<1066>:Push IMM

##########
	 0: 48 be 
##########


##########
	 0: 56 
##########

Translating push ram

##########
	 0: 50 
##########


##########
	 0: f2 0f 10 44 24 00 
##########


##########
	 0: 48 83 c4 08 
##########


##########
	 0: f2 48 0f 2d f0 
##########


##########
	 0: 48 c1 e6 03 
##########


##########
	 0: 49 01 f2 
##########


##########
	 0: 5f 
##########


##########
	 0: 49 89 ba 
##########


##########
	 0: 49 29 f2 
##########

Translating push ram

##########
	 0: 50 
##########


##########
	 0: f2 0f 10 44 24 00 
##########


##########
	 0: 48 83 c4 08 
##########


##########
	 0: f2 48 0f 2d f0 
##########


##########
	 0: 48 c1 e6 03 
##########


##########
	 0: 49 01 f2 
##########


##########
	 0: 49 8b ba 
##########


##########
	 0: 57 
##########


##########
	 0: 49 29 f2 
##########

<1145>:Push IMM

##########
	 0: 48 be 
##########


##########
	 0: 56 
##########

52: Translating jmp

##########
	 0: f2 0f 10 44 24 00 
##########


##########
	 0: f2 0f 10 4c 24 08 
##########


##########
	 0: 48 83 c4 10 
##########


##########
	 0: 66 0f 2e c1 
##########


##########
	 0: 0f 85 
##########

Translating push ram

##########
	 0: 50 
##########


##########
	 0: f2 0f 10 44 24 00 
##########


##########
	 0: 48 83 c4 08 
##########


##########
	 0: f2 48 0f 2d f0 
##########


##########
	 0: 48 c1 e6 03 
##########


##########
	 0: 49 01 f2 
##########


##########
	 0: 49 8b ba 
##########


##########
	 0: 57 
##########


##########
	 0: 49 29 f2 
##########

<1216>:Push IMM

##########
	 0: 48 be 
##########


##########
	 0: 56 
##########

55: Translating math

##########
	 0: f2 0f 10 44 24 00 
##########


##########
	 0: f2 0f 10 4c 24 08 
##########


##########
	 0: 48 83 c4 08 
##########


##########
	 0: f2 0f 59 c1 
##########


##########
	 0: f2 0f 11 44 24 00 
##########

Translating push ram

##########
	 0: 50 
##########


##########
	 0: f2 0f 10 44 24 00 
##########


##########
	 0: 48 83 c4 08 
##########


##########
	 0: f2 48 0f 2d f0 
##########


##########
	 0: 48 c1 e6 03 
##########


##########
	 0: 49 01 f2 
##########


##########
	 0: 49 8b ba 
##########


##########
	 0: 57 
##########


##########
	 0: 49 29 f2 
##########

<1287>:Push IMM

##########
	 0: 48 be 
##########


##########
	 0: 56 
##########

58: Translating math

##########
	 0: f2 0f 10 44 24 00 
##########


##########
	 0: f2 0f 10 4c 24 08 
##########


##########
	 0: 48 83 c4 08 
##########


##########
	 0: f2 0f 5c c1 
##########


##########
	 0: f2 0f 11 44 24 00 
##########

59: Translating math

##########
	 0: f2 0f 10 44 24 00 
##########


##########
	 0: f2 0f 10 4c 24 08 
##########


##########
	 0: 48 83 c4 08 
##########


##########
	 0: f2 0f 5e c1 
##########


##########
	 0: f2 0f 11 44 24 00 
##########

Translating push ram

##########
	 0: 50 
##########


##########
	 0: f2 0f 10 44 24 00 
##########


##########
	 0: 48 83 c4 08 
##########


##########
	 0: f2 48 0f 2d f0 
##########


##########
	 0: 48 c1 e6 03 
##########


##########
	 0: 49 01 f2 
##########


##########
	 0: 5f 
##########


##########
	 0: 49 89 ba 
##########


##########
	 0: 49 29 f2 
##########

Translating push ram

##########
	 0: 50 
##########


##########
	 0: f2 0f 10 44 24 00 
##########


##########
	 0: 48 83 c4 08 
##########


##########
	 0: f2 48 0f 2d f0 
##########


##########
	 0: 48 c1 e6 03 
##########


##########
	 0: 49 01 f2 
##########


##########
	 0: 49 8b ba 
##########


##########
	 0: 57 
##########


##########
	 0: 49 29 f2 
##########

Translating OUT
##########
	 0: f2 0f 10 44 24 00 
##########


##########
	 0: 41 52 53 52 51 50 
##########


##########
	 0: 49 89 e4 
##########


##########
	 0: 48 83 e4 f0 
##########


##########
	 0: e8 
##########


##########
	 0: 4c 89 e4 
##########


##########
	 0: 58 59 5a 5b 41 5a 
##########


##########
	 0: 5f 
##########

1452:Push/Pop REG

##########
	 0: 5a 
##########

1453:Push/Pop REG

##########
	 0: 52 
##########

Translating RET
##########
	 0: c3 
##########

Translating Jump or Call
##########
	 0: e9 
##########

<1460>:Push IMM

##########
	 0: 48 be 
##########


##########
	 0: 56 
##########

Translating push ram

##########
	 0: 50 
##########


##########
	 0: f2 0f 10 44 24 00 
##########


##########
	 0: 48 83 c4 08 
##########


##########
	 0: f2 48 0f 2d f0 
##########


##########
	 0: 48 c1 e6 03 
##########


##########
	 0: 49 01 f2 
##########


##########
	 0: 49 8b ba 
##########


##########
	 0: 57 
##########


##########
	 0: 49 29 f2 
##########

69: Translating jmp

##########
	 0: f2 0f 10 44 24 00 
##########


##########
	 0: f2 0f 10 4c 24 08 
##########


##########
	 0: 48 83 c4 10 
##########


##########
	 0: 66 0f 2e c1 
##########


##########
	 0: 0f 87 
##########

Translating push ram

##########
	 0: 50 
##########


##########
	 0: f2 0f 10 44 24 00 
##########


##########
	 0: 48 83 c4 08 
##########


##########
	 0: f2 48 0f 2d f0 
##########


##########
	 0: 48 c1 e6 03 
##########


##########
	 0: 49 01 f2 
##########


##########
	 0: 49 8b ba 
##########


##########
	 0: 57 
##########


##########
	 0: 49 29 f2 
##########

Translating OUT
##########
	 0: f2 0f 10 44 24 00 
##########


##########
	 0: 41 52 53 52 51 50 
##########


##########
	 0: 49 89 e4 
##########


##########
	 0: 48 83 e4 f0 
##########


##########
	 0: e8 
##########


##########
	 0: 4c 89 e4 
##########


##########
	 0: 58 59 5a 5b 41 5a 
##########


##########
	 0: 5f 
##########

Translating push ram

##########
	 0: 50 
##########


##########
	 0: f2 0f 10 44 24 00 
##########


##########
	 0: 48 83 c4 08 
##########


##########
	 0: f2 48 0f 2d f0 
##########


##########
	 0: 48 c1 e6 03 
##########


##########
	 0: 49 01 f2 
##########


##########
	 0: 49 8b ba 
##########


##########
	 0: 57 
##########


##########
	 0: 49 29 f2 
##########

Translating OUT
##########
	 0: f2 0f 10 44 24 00 
##########


##########
	 0: 41 52 53 52 51 50 
##########


##########
	 0: 49 89 e4 
##########


##########
	 0: 48 83 e4 f0 
##########


##########
	 0: e8 
##########


##########
	 0: 4c 89 e4 
##########


##########
	 0: 58 59 5a 5b 41 5a 
##########


##########
	 0: 5f 
##########

1667:Push/Pop REG

##########
	 0: 5a 
##########

1668:Push/Pop REG

##########
	 0: 52 
##########

Translating RET
##########
	 0: c3 
##########

Translating Jump or Call
##########
	 0: e9 
##########

<1675>:Push IMM

##########
	 0: 48 be 
##########


##########
	 0: 56 
##########

Translating push ram

##########
	 0: 50 
##########


##########
	 0: f2 0f 10 44 24 00 
##########


##########
	 0: 48 83 c4 08 
##########


##########
	 0: f2 48 0f 2d f0 
##########


##########
	 0: 48 c1 e6 03 
##########


##########
	 0: 49 01 f2 
##########


##########
	 0: 49 8b ba 
##########


##########
	 0: 57 
##########


##########
	 0: 49 29 f2 
##########

80: Translating math

##########
	 0: f2 0f 10 44 24 00 
##########


##########
	 0: f2 0f 10 4c 24 08 
##########


##########
	 0: 48 83 c4 08 
##########


##########
	 0: f2 0f 59 c1 
##########


##########
	 0: f2 0f 11 44 24 00 
##########

Translating push ram

##########
	 0: 50 
##########


##########
	 0: f2 0f 10 44 24 00 
##########


##########
	 0: 48 83 c4 08 
##########


##########
	 0: f2 48 0f 2d f0 
##########


##########
	 0: 48 c1 e6 03 
##########


##########
	 0: 49 01 f2 
##########


##########
	 0: 49 8b ba 
##########


##########
	 0: 57 
##########


##########
	 0: 49 29 f2 
##########

<1780>:Push IMM

##########
	 0: 48 be 
##########


##########
	 0: 56 
##########

83: Translating math

##########
	 0: f2 0f 10 44 24 00 
##########


##########
	 0: f2 0f 10 4c 24 08 
##########


##########
	 0: 48 83 c4 08 
##########


##########
	 0: f2 0f 5c c1 
##########


##########
	 0: f2 0f 11 44 24 00 
##########

Translating push ram

##########
	 0: 50 
##########


##########
	 0: f2 0f 10 44 24 00 
##########


##########
	 0: 48 83 c4 08 
##########


##########
	 0: f2 48 0f 2d f0 
##########


##########
	 0: 48 c1 e6 03 
##########


##########
	 0: 49 01 f2 
##########


##########
	 0: 49 8b ba 
##########


##########
	 0: 57 
##########


##########
	 0: 49 29 f2 
##########


##########
	 0: f2 0f 10 44 24 00 
##########


##########
	 0: 66 0f 51 c0 
##########


##########
	 0: f2 0f 11 44 24 00 
##########

86: Translating math

##########
	 0: f2 0f 10 44 24 00 
##########


##########
	 0: f2 0f 10 4c 24 08 
##########


##########
	 0: 48 83 c4 08 
##########


##########
	 0: f2 0f 58 c1 
##########


##########
	 0: f2 0f 11 44 24 00 
##########

87: Translating math

##########
	 0: f2 0f 10 44 24 00 
##########


##########
	 0: f2 0f 10 4c 24 08 
##########


##########
	 0: 48 83 c4 08 
##########


##########
	 0: f2 0f 5e c1 
##########


##########
	 0: f2 0f 11 44 24 00 
##########

Translating push ram

##########
	 0: 50 
##########


##########
	 0: f2 0f 10 44 24 00 
##########


##########
	 0: 48 83 c4 08 
##########


##########
	 0: f2 48 0f 2d f0 
##########


##########
	 0: 48 c1 e6 03 
##########


##########
	 0: 49 01 f2 
##########


##########
	 0: 5f 
##########


##########
	 0: 49 89 ba 
##########


##########
	 0: 49 29 f2 
##########

<1953>:Push IMM

##########
	 0: 48 be 
##########


##########
	 0: 56 
##########

Translating push ram

##########
	 0: 50 
##########


##########
	 0: f2 0f 10 44 24 00 
##########


##########
	 0: 48 83 c4 08 
##########


##########
	 0: f2 48 0f 2d f0 
##########


##########
	 0: 48 c1 e6 03 
##########


##########
	 0: 49 01 f2 
##########


##########
	 0: 49 8b ba 
##########


##########
	 0: 57 
##########


##########
	 0: 49 29 f2 
##########

91: Translating math

##########
	 0: f2 0f 10 44 24 00 
##########


##########
	 0: f2 0f 10 4c 24 08 
##########


##########
	 0: 48 83 c4 08 
##########


##########
	 0: f2 0f 59 c1 
##########


##########
	 0: f2 0f 11 44 24 00 
##########

Translating push ram

##########
	 0: 50 
##########


##########
	 0: f2 0f 10 44 24 00 
##########


##########
	 0: 48 83 c4 08 
##########


##########
	 0: f2 48 0f 2d f0 
##########


##########
	 0: 48 c1 e6 03 
##########


##########
	 0: 49 01 f2 
##########


##########
	 0: 49 8b ba 
##########


##########
	 0: 57 
##########


##########
	 0: 49 29 f2 
##########


##########
	 0: f2 0f 10 44 24 00 
##########


##########
	 0: 66 0f 51 c0 
##########


##########
	 0: f2 0f 11 44 24 00 
##########

Translating push ram

##########
	 0: 50 
##########


##########
	 0: f2 0f 10 44 24 00 
##########


##########
	 0: 48 83 c4 08 
##########


##########
	 0: f2 48 0f 2d f0 
##########


##########
	 0: 48 c1 e6 03 
##########


##########
	 0: 49 01 f2 
##########


##########
	 0: 49 8b ba 
##########


##########
	 0: 57 
##########


##########
	 0: 49 29 f2 
##########

<2108>:Push IMM

##########
	 0: 48 be 
##########


##########
	 0: 56 
##########

96: Translating math

##########
	 0: f2 0f 10 44 24 00 
##########


##########
	 0: f2 0f 10 4c 24 08 
##########


##########
	 0: 48 83 c4 08 
##########


##########
	 0: f2 0f 5c c1 
##########


##########
	 0: f2 0f 11 44 24 00 
##########

97: Translating math

##########
	 0: f2 0f 10 44 24 00 
##########


##########
	 0: f2 0f 10 4c 24 08 
##########


##########
	 0: 48 83 c4 08 
##########


##########
	 0: f2 0f 5c c1 
##########


##########
	 0: f2 0f 11 44 24 00 
##########

98: Translating math

##########
	 0: f2 0f 10 44 24 00 
##########


##########
	 0: f2 0f 10 4c 24 08 
##########


##########
	 0: 48 83 c4 08 
##########


##########
	 0: f2 0f 5e c1 
##########


##########
	 0: f2 0f 11 44 24 00 
##########

Translating push ram

##########
	 0: 50 
##########


##########
	 0: f2 0f 10 44 24 00 
##########


##########
	 0: 48 83 c4 08 
##########


##########
	 0: f2 48 0f 2d f0 
##########


##########
	 0: 48 c1 e6 03 
##########


##########
	 0: 49 01 f2 
##########


##########
	 0: 5f 
##########


##########
	 0: 49 89 ba 
##########


##########
	 0: 49 29 f2 
##########

Translating push ram

##########
	 0: 50 
##########


##########
	 0: f2 0f 10 44 24 00 
##########


##########
	 0: 48 83 c4 08 
##########


##########
	 0: f2 48 0f 2d f0 
##########


##########
	 0: 48 c1 e6 03 
##########


##########
	 0: 49 01 f2 
##########


##########
	 0: 49 8b ba 
##########


##########
	 0: 57 
##########


##########
	 0: 49 29 f2 
##########

Translating OUT
##########
	 0: f2 0f 10 44 24 00 
##########


##########
	 0: 41 52 53 52 51 50 
##########


##########
	 0: 49 89 e4 
##########


##########
	 0: 48 83 e4 f0 
##########


##########
	 0: e8 
##########


##########
	 0: 4c 89 e4 
##########


##########
	 0: 58 59 5a 5b 41 5a 
##########


##########
	 0: 5f 
##########

Translating push ram

##########
	 0: 50 
##########


##########
	 0: f2 0f 10 44 24 00 
##########


##########
	 0: 48 83 c4 08 
##########


##########
	 0: f2 48 0f 2d f0 
##########


##########
	 0: 48 c1 e6 03 
##########


##########
	 0: 49 01 f2 
##########


##########
	 0: 49 8b ba 
##########


##########
	 0: 57 
##########


##########
	 0: 49 29 f2 
##########

Translating OUT
##########
	 0: f2 0f 10 44 24 00 
##########


##########
	 0: 41 52 53 52 51 50 
##########


##########
	 0: 49 89 e4 
##########


##########
	 0: 48 83 e4 f0 
##########


##########
	 0: e8 
##########


##########
	 0: 4c 89 e4 
##########


##########
	 0: 58 59 5a 5b 41 5a 
##########


##########
	 0: 5f 
##########

2367:Push/Pop REG

##########
	 0: 5a 
##########

2368:Push/Pop REG

##########
	 0: 52 
##########

Translating RET
##########
	 0: c3 
##########


##########
	 0: c3 
##########



====== x86 buffer dump begin =======

 0: 49 ba 00 b0 1d 02 00 00 
 8: 00 00 e8 01 00 00 00 c3 
16: 5a 52 48 be 00 00 00 00 
24: 00 b4 ad 40 56 50 f2 0f 
32: 10 44 24 00 48 83 c4 08 
40: f2 48 0f 2d f0 48 c1 e6 
48: 03 49 01 f2 5f 49 89 ba 
56: 00 00 00 00 49 29 f2 57 
64: 48 8d 7c 24 00 41 52 53 
72: 52 51 50 49 89 e4 48 83 
80: e4 f0 e8 1a 8c 22 fe 4c 
88: 89 e4 58 59 5a 5b 41 5a 
96: 50 f2 0f 10 44 24 00 48 
104: 83 c4 08 f2 48 0f 2d f0 
112: 48 c1 e6 03 49 01 f2 5f 
120: 49 89 ba 08 00 00 00 49 
128: 29 f2 57 48 8d 7c 24 00 
136: 41 52 53 52 51 50 49 89 
144: e4 48 83 e4 f0 e8 d7 8b 
152: 22 fe 4c 89 e4 58 59 5a 
160: 5b 41 5a 50 f2 0f 10 44 
168: 24 00 48 83 c4 08 f2 48 
176: 0f 2d f0 48 c1 e6 03 49 
184: 01 f2 5f 49 89 ba 10 00 
192: 00 00 49 29 f2 57 48 8d 
200: 7c 24 00 41 52 53 52 51 
208: 50 49 89 e4 48 83 e4 f0 
216: e8 94 8b 22 fe 4c 89 e4 
224: 58 59 5a 5b 41 5a 50 f2 
232: 0f 10 44 24 00 48 83 c4 
240: 08 f2 48 0f 2d f0 48 c1 
248: e6 03 49 01 f2 5f 49 89 
256: ba 18 00 00 00 49 29 f2 
264: 48 be 00 00 00 00 00 00 
272: 10 40 56 50 f2 0f 10 44 
280: 24 00 48 83 c4 08 f2 48 
288: 0f 2d f0 48 c1 e6 03 49 
296: 01 f2 49 8b ba 08 00 00 
304: 00 57 49 29 f2 f2 0f 10 
312: 44 24 00 f2 0f 10 4c 24 
320: 08 48 83 c4 08 f2 0f 59 
328: c1 f2 0f 11 44 24 00 50 
336: f2 0f 10 44 24 00 48 83 
344: c4 08 f2 48 0f 2d f0 48 
352: c1 e6 03 49 01 f2 49 8b 
360: ba 18 00 00 00 57 49 29 
368: f2 f2 0f 10 44 24 00 f2 
376: 0f 10 4c 24 08 48 83 c4 
384: 08 f2 0f 59 c1 f2 0f 11 
392: 44 24 00 50 f2 0f 10 44 
400: 24 00 48 83 c4 08 f2 48 
408: 0f 2d f0 48 c1 e6 03 49 
416: 01 f2 49 8b ba 10 00 00 
424: 00 57 49 29 f2 50 f2 0f 
432: 10 44 24 00 48 83 c4 08 
440: f2 48 0f 2d f0 48 c1 e6 
448: 03 49 01 f2 49 8b ba 10 
456: 00 00 00 57 49 29 f2 f2 
464: 0f 10 44 24 00 f2 0f 10 
472: 4c 24 08 48 83 c4 08 f2 
480: 0f 59 c1 f2 0f 11 44 24 
488: 00 f2 0f 10 44 24 00 f2 
496: 0f 10 4c 24 08 48 83 c4 
504: 08 f2 0f 5c c1 f2 0f 11 
512: 44 24 00 50 f2 0f 10 44 
520: 24 00 48 83 c4 08 f2 48 
528: 0f 2d f0 48 c1 e6 03 49 
536: 01 f2 5f 49 89 ba 20 00 
544: 00 00 49 29 f2 50 f2 0f 
552: 10 44 24 00 48 83 c4 08 
560: f2 48 0f 2d f0 48 c1 e6 
568: 03 49 01 f2 49 8b ba 20 
576: 00 00 00 57 49 29 f2 f2 
584: 0f 10 44 24 00 41 52 53 
592: 52 51 50 49 89 e4 48 83 
600: e4 f0 e8 0d 88 22 fe 4c 
608: 89 e4 58 59 5a 5b 41 5a 
616: 5f 50 f2 0f 10 44 24 00 
624: 48 83 c4 08 f2 48 0f 2d 
632: f0 48 c1 e6 03 49 01 f2 
640: 49 8b ba 08 00 00 00 57 
648: 49 29 f2 48 be 00 00 00 
656: 00 00 00 00 00 56 f2 0f 
664: 10 44 24 00 f2 0f 10 4c 
672: 24 08 48 83 c4 10 66 0f 
680: 2e c1 0f 85 84 01 00 00 
688: 50 f2 0f 10 44 24 00 48 
696: 83 c4 08 f2 48 0f 2d f0 
704: 48 c1 e6 03 49 01 f2 49 
712: 8b ba 10 00 00 00 57 49 
720: 29 f2 48 be 00 00 00 00 
728: 00 00 00 00 56 f2 0f 10 
736: 44 24 00 f2 0f 10 4c 24 
744: 08 48 83 c4 10 66 0f 2e 
752: c1 0f 85 4c 00 00 00 50 
760: f2 0f 10 44 24 00 48 83 
768: c4 08 f2 48 0f 2d f0 48 
776: c1 e6 03 49 01 f2 49 8b 
784: ba 00 00 00 00 57 49 29 
792: f2 f2 0f 10 44 24 00 41 
800: 52 53 52 51 50 49 89 e4 
808: 48 83 e4 f0 e8 3b 87 22 
816: fe 4c 89 e4 58 59 5a 5b 
824: 41 5a 5f 5a 52 c3 e9 ec 
832: 00 00 00 50 f2 0f 10 44 
840: 24 00 48 83 c4 08 f2 48 
848: 0f 2d f0 48 c1 e6 03 49 
856: 01 f2 49 8b ba 10 00 00 
864: 00 57 49 29 f2 50 f2 0f 
872: 10 44 24 00 48 83 c4 08 
880: f2 48 0f 2d f0 48 c1 e6 
888: 03 49 01 f2 49 8b ba 18 
896: 00 00 00 57 49 29 f2 48 
904: be 00 00 00 00 00 00 00 
912: 00 56 f2 0f 10 44 24 00 
920: f2 0f 10 4c 24 08 48 83 
928: c4 08 f2 0f 5c c1 f2 0f 
936: 11 44 24 00 f2 0f 10 44 
944: 24 00 f2 0f 10 4c 24 08 
952: 48 83 c4 08 f2 0f 5e c1 
960: f2 0f 11 44 24 00 50 f2 
968: 0f 10 44 24 00 48 83 c4 
976: 08 f2 48 0f 2d f0 48 c1 
984: e6 03 49 01 f2 5f 49 89 
992: ba 28 00 00 00 49 29 f2 
1000: 50 f2 0f 10 44 24 00 48 
1008: 83 c4 08 f2 48 0f 2d f0 
1016: 48 c1 e6 03 49 01 f2 49 
1024: 8b ba 28 00 00 00 57 49 
1032: 29 f2 f2 0f 10 44 24 00 
1040: 41 52 53 52 51 50 49 89 
1048: e4 48 83 e4 f0 e8 4a 86 
1056: 22 fe 4c 89 e4 58 59 5a 
1064: 5b 41 5a 5f 5a 52 c3 e9 
1072: 2d 00 00 00 48 be 00 00 
1080: 00 00 00 e4 94 40 56 50 
1088: f2 0f 10 44 24 00 48 83 
1096: c4 08 f2 48 0f 2d f0 48 
1104: c1 e6 03 49 01 f2 5f 49 
1112: 89 ba 30 00 00 00 49 29 
1120: f2 50 f2 0f 10 44 24 00 
1128: 48 83 c4 08 f2 48 0f 2d 
1136: f0 48 c1 e6 03 49 01 f2 
1144: 49 8b ba 20 00 00 00 57 
1152: 49 29 f2 48 be 00 00 00 
1160: 00 00 00 00 00 56 f2 0f 
1168: 10 44 24 00 f2 0f 10 4c 
1176: 24 08 48 83 c4 10 66 0f 
1184: 2e c1 0f 85 16 01 00 00 
1192: 50 f2 0f 10 44 24 00 48 
1200: 83 c4 08 f2 48 0f 2d f0 
1208: 48 c1 e6 03 49 01 f2 49 
1216: 8b ba 08 00 00 00 57 49 
1224: 29 f2 48 be 00 00 00 00 
1232: 00 00 00 40 56 f2 0f 10 
1240: 44 24 00 f2 0f 10 4c 24 
1248: 08 48 83 c4 08 f2 0f 59 
1256: c1 f2 0f 11 44 24 00 50 
1264: f2 0f 10 44 24 00 48 83 
1272: c4 08 f2 48 0f 2d f0 48 
1280: c1 e6 03 49 01 f2 49 8b 
1288: ba 10 00 00 00 57 49 29 
1296: f2 48 be 00 00 00 00 00 
1304: 00 00 00 56 f2 0f 10 44 
1312: 24 00 f2 0f 10 4c 24 08 
1320: 48 83 c4 08 f2 0f 5c c1 
1328: f2 0f 11 44 24 00 f2 0f 
1336: 10 44 24 00 f2 0f 10 4c 
1344: 24 08 48 83 c4 08 f2 0f 
1352: 5e c1 f2 0f 11 44 24 00 
1360: 50 f2 0f 10 44 24 00 48 
1368: 83 c4 08 f2 48 0f 2d f0 
1376: 48 c1 e6 03 49 01 f2 5f 
1384: 49 89 ba 28 00 00 00 49 
1392: 29 f2 50 f2 0f 10 44 24 
1400: 00 48 83 c4 08 f2 48 0f 
1408: 2d f0 48 c1 e6 03 49 01 
1416: f2 49 8b ba 28 00 00 00 
1424: 57 49 29 f2 f2 0f 10 44 
1432: 24 00 41 52 53 52 51 50 
1440: 49 89 e4 48 83 e4 f0 e8 
1448: c0 84 22 fe 4c 89 e4 58 
1456: 59 5a 5b 41 5a 5f 5a 52 
1464: c3 e9 00 00 00 00 48 be 
1472: 00 00 00 00 00 00 00 00 
1480: 56 50 f2 0f 10 44 24 00 
1488: 48 83 c4 08 f2 48 0f 2d 
1496: f0 48 c1 e6 03 49 01 f2 
1504: 49 8b ba 20 00 00 00 57 
1512: 49 29 f2 f2 0f 10 44 24 
1520: 00 f2 0f 10 4c 24 08 48 
1528: 83 c4 10 66 0f 2e c1 0f 
1536: 87 |  00 00 00 50 f2 0f 
1544: 10 44 24 00 48 83 c4 08 
1552: f2 48 0f 2d f0 48 c1 e6 
1560: 03 49 01 f2 49 8b ba 30 
1568: 00 00 00 57 49 29 f2 f2 
1576: 0f 10 44 24 00 41 52 53 
1584: 52 51 50 49 89 e4 48 83 
1592: e4 f0 e8 2d 84 22 fe 4c 
1600: 89 e4 58 59 5a 5b 41 5a 
1608: 5f 50 f2 0f 10 44 24 00 
1616: 48 83 c4 08 f2 48 0f 2d 
1624: f0 48 c1 e6 03 49 01 f2 
1632: 49 8b ba 30 00 00 00 57 
1640: 49 29 f2 f2 0f 10 44 24 
1648: 00 41 52 53 52 51 50 49 
1656: 89 e4 48 83 e4 f0 e8 e9 
1664: 83 22 fe 4c 89 e4 58 59 
1672: 5a 5b 41 5a 5f 5a 52 c3 
1680: e9 b4 02 00 00 48 be 00 
1688: 00 00 00 00 00 00 40 56 
1696: 50 f2 0f 10 44 24 00 48 
1704: 83 c4 08 f2 48 0f 2d f0 
1712: 48 c1 e6 03 49 01 f2 49 
1720: 8b ba 08 00 00 00 57 49 
1728: 29 f2 f2 0f 10 44 24 00 
1736: f2 0f 10 4c 24 08 48 83 
1744: c4 08 f2 0f 59 c1 f2 0f 
1752: 11 44 24 00 50 f2 0f 10 
1760: 44 24 00 48 83 c4 08 f2 
1768: 48 0f 2d f0 48 c1 e6 03 
1776: 49 01 f2 49 8b ba 10 00 
1784: 00 00 57 49 29 f2 48 be 
1792: 00 00 00 00 00 00 00 00 
1800: 56 f2 0f 10 44 24 00 f2 
1808: 0f 10 4c 24 08 48 83 c4 
1816: 08 f2 0f 5c c1 f2 0f 11 
1824: 44 24 00 50 f2 0f 10 44 
1832: 24 00 48 83 c4 08 f2 48 
1840: 0f 2d f0 48 c1 e6 03 49 
1848: 01 f2 49 8b ba 20 00 00 
1856: 00 57 49 29 f2 f2 0f 10 
1864: 44 24 00 66 0f 51 c0 f2 
1872: 0f 11 44 24 00 f2 0f 10 
1880: 44 24 00 f2 0f 10 4c 24 
1888: 08 48 83 c4 08 f2 0f 58 
1896: c1 f2 0f 11 44 24 00 f2 
1904: 0f 10 44 24 00 f2 0f 10 
1912: 4c 24 08 48 83 c4 08 f2 
1920: 0f 5e c1 f2 0f 11 44 24 
1928: 00 50 f2 0f 10 44 24 00 
1936: 48 83 c4 08 f2 48 0f 2d 
1944: f0 48 c1 e6 03 49 01 f2 
1952: 5f 49 89 ba 38 00 00 00 
1960: 49 29 f2 48 be 00 00 00 
1968: 00 00 00 00 40 56 50 f2 
1976: 0f 10 44 24 00 48 83 c4 
1984: 08 f2 48 0f 2d f0 48 c1 
1992: e6 03 49 01 f2 49 8b ba 
2000: 08 00 00 00 57 49 29 f2 
2008: f2 0f 10 44 24 00 f2 0f 
2016: 10 4c 24 08 48 83 c4 08 
2024: f2 0f 59 c1 f2 0f 11 44 
2032: 24 00 50 f2 0f 10 44 24 
2040: 00 48 83 c4 08 f2 48 0f 
2048: 2d f0 48 c1 e6 03 49 01 
2056: f2 49 8b ba 20 00 00 00 
2064: 57 49 29 f2 f2 0f 10 44 
2072: 24 00 66 0f 51 c0 f2 0f 
2080: 11 44 24 00 50 f2 0f 10 
2088: 44 24 00 48 83 c4 08 f2 
2096: 48 0f 2d f0 48 c1 e6 03 
2104: 49 01 f2 49 8b ba 10 00 
2112: 00 00 57 49 29 f2 48 be 
2120: 00 00 00 00 00 00 00 00 
2128: 56 f2 0f 10 44 24 00 f2 
2136: 0f 10 4c 24 08 48 83 c4 
2144: 08 f2 0f 5c c1 f2 0f 11 
2152: 44 24 00 f2 0f 10 44 24 
2160: 00 f2 0f 10 4c 24 08 48 
2168: 83 c4 08 f2 0f 5c c1 f2 
2176: 0f 11 44 24 00 f2 0f 10 
2184: 44 24 00 f2 0f 10 4c 24 
2192: 08 48 83 c4 08 f2 0f 5e 
2200: c1 f2 0f 11 44 24 00 50 
2208: f2 0f 10 44 24 00 48 83 
2216: c4 08 f2 48 0f 2d f0 48 
2224: c1 e6 03 49 01 f2 5f 49 
2232: 89 ba 40 00 00 00 49 29 
2240: f2 50 f2 0f 10 44 24 00 
2248: 48 83 c4 08 f2 48 0f 2d 
2256: f0 48 c1 e6 03 49 01 f2 
2264: 49 8b ba 38 00 00 00 57 
2272: 49 29 f2 f2 0f 10 44 24 
2280: 00 41 52 53 52 51 50 49 
2288: 89 e4 48 83 e4 f0 e8 71 
2296: 81 22 fe 4c 89 e4 58 59 
2304: 5a 5b 41 5a 5f 50 f2 0f 
2312: 10 44 24 00 48 83 c4 08 
2320: f2 48 0f 2d f0 48 c1 e6 
2328: 03 49 01 f2 49 8b ba 40 
2336: 00 00 00 57 49 29 f2 f2 
2344: 0f 10 44 24 00 41 52 53 
2352: 52 51 50 49 89 e4 48 83 
2360: e4 f0 e8 2d 81 22 fe 4c 
2368: 89 e4 58 59 5a 5b 41 5a 
2376: 5f 5a 52 c3 c3 00 

====== x86 buffer dump end =======

