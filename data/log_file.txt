Ip   8:
	Id: 17
	Yeah, it is jump
Ip  18:
	Id: 0
Ip  19:
	Id: 6
Ip  29:
	Id: 1
Ip  39:
	Id: 1
Ip  49:
	Id: 6
Ip  59:
	Id: 1
Ip  69:
	Id: 6
Ip  79:
	Id: 1
Ip  89:
	Id: 6
Ip  99:
	Id: 1
Ip 109:
	Id: 1
Ip 119:
	Id: 1
Ip 129:
	Id: 1
Ip 139:
	Id: 1
Ip 149:
	Id: 3
Ip 150:
	Id: 6
Ip 160:
	Id: 17
	Yeah, it is jump
Ip 170:
	Id: 1
Ip 180:
	Id: 1
Ip 190:
	Id: 4
Ip 191:
	Id: 6
Ip 201:
	Id: 6
Ip 211:
	Id: 1
Ip 221:
	Id: 7
Ip 222:
	Id: 6
Ip 232:
	Id: 1
Ip 242:
	Id: 18
Ip 243:
	Id: 6
Ip 253:
	Id: 6
Ip 263:
	Id: 6
Ip 273:
	Id: 6
Ip 283:
	Id: 1
Ip 293:
	Id: 1
Ip 303:
	Id: 1
Ip 313:
	Id: 3
Ip 314:
	Id: 6
Ip 324:
	Id: 1
Ip 334:
	Id: 1
Ip 344:
	Id: 2
Ip 345:
	Id: 6
Ip 355:
	Id: 1
Ip 365:
	Id: 6
Ip 375:
	Id: 1
Ip 385:
	Id: 1
Ip 395:
	Id: 15
	Yeah, it is jump
Ip 405:
	Id: 6
Ip 415:
	Id: 1
Ip 425:
	Id: 1
Ip 435:
	Id: 18
Ip 436:
	Id: 9
	Yeah, it is jump
Ip 446:
	Id: 1
Ip 456:
	Id: 1
Ip 466:
	Id: 1
Ip 476:
	Id: 1
Ip 486:
	Id: 1
Ip 496:
	Id: 3
Ip 497:
	Id: 6
Ip 507:
	Id: 17
	Yeah, it is jump
Ip 517:
	Id: 1
Ip 527:
	Id: 1
Ip 537:
	Id: 4
Ip 538:
	Id: 6
Ip 548:
	Id: 6
Ip 558:
	Id: 6
Ip 568:
	Id: 1
Ip 578:
	Id: 1
Ip 588:
	Id: 18
Ip 589:
End of prog.

================ Begin of struct dump ==================

Command < CALL: 17 > | Native/x86 size: 10/5 | x86 ip: 0
	Yeah, it is jump
	+Wants to jump into 19

Command < HLT: 0 > | Native/x86 size: 1/7 | x86 ip: 0

Command < POP: 6 > | Native/x86 size: 10/1 | x86 ip: 0
Checksum: 64
	+Using register, its id: 2

Command < PUSH: 1 > | Native/x86 size: 10/1 | x86 ip: 0
Checksum: 64
	+Using register, its id: 2

Command < PUSH: 1 > | Native/x86 size: 10/11 | x86 ip: 0
Checksum: 32
	+Operating width digit, value: 1

Command < POP: 6 > | Native/x86 size: 10/34 | x86 ip: 0
Checksum: 224
	+Using register, its id: 0
	+Operating width digit, value: 0
--- Adresses to memory

Command < PUSH: 1 > | Native/x86 size: 10/11 | x86 ip: 0
Checksum: 32
	+Operating width digit, value: 1

Command < POP: 6 > | Native/x86 size: 10/34 | x86 ip: 0
Checksum: 224
	+Using register, its id: 0
	+Operating width digit, value: 1
--- Adresses to memory

Command < PUSH: 1 > | Native/x86 size: 10/11 | x86 ip: 0
Checksum: 32
	+Operating width digit, value: 5

Command < POP: 6 > | Native/x86 size: 10/34 | x86 ip: 0
Checksum: 224
	+Using register, its id: 0
	+Operating width digit, value: 2
--- Adresses to memory

Command < PUSH: 1 > | Native/x86 size: 10/34 | x86 ip: 0
Checksum: 224
	+Using register, its id: 0
	+Operating width digit, value: 0
--- Adresses to memory

Command < PUSH: 1 > | Native/x86 size: 10/34 | x86 ip: 0
Checksum: 224
	+Using register, its id: 0
	+Operating width digit, value: 1
--- Adresses to memory

Command < PUSH: 1 > | Native/x86 size: 10/34 | x86 ip: 0
Checksum: 224
	+Using register, its id: 0
	+Operating width digit, value: 2
--- Adresses to memory

Command < PUSH: 1 > | Native/x86 size: 10/11 | x86 ip: 0
Checksum: 32
	+Operating width digit, value: 4

Command < PUSH: 1 > | Native/x86 size: 10/1 | x86 ip: 0
Checksum: 64
	+Using register, its id: 0

Command < ADD: 3 > | Native/x86 size: 1/26 | x86 ip: 0

Command < POP: 6 > | Native/x86 size: 10/1 | x86 ip: 0
Checksum: 64
	+Using register, its id: 0

Command < CALL: 17 > | Native/x86 size: 10/5 | x86 ip: 0
	Yeah, it is jump
	+Wants to jump into 243

Command < PUSH: 1 > | Native/x86 size: 10/11 | x86 ip: 0
Checksum: 32
	+Operating width digit, value: 4

Command < PUSH: 1 > | Native/x86 size: 10/1 | x86 ip: 0
Checksum: 64
	+Using register, its id: 0

Command < SUB: 4 > | Native/x86 size: 1/26 | x86 ip: 0

Command < POP: 6 > | Native/x86 size: 10/1 | x86 ip: 0
Checksum: 64
	+Using register, its id: 0

Command < POP: 6 > | Native/x86 size: 10/34 | x86 ip: 0
Checksum: 224
	+Using register, its id: 0
	+Operating width digit, value: 0
--- Adresses to memory

Command < PUSH: 1 > | Native/x86 size: 10/34 | x86 ip: 0
Checksum: 224
	+Using register, its id: 0
	+Operating width digit, value: 0
--- Adresses to memory

Command < OUT: 7 > | Native/x86 size: 1/41 | x86 ip: 0

Command < POP: 6 > | Native/x86 size: 10/1 | x86 ip: 0
Checksum: 64
	+Using register, its id: 2

Command < PUSH: 1 > | Native/x86 size: 10/1 | x86 ip: 0
Checksum: 64
	+Using register, its id: 2

Command < RET: 18 > | Native/x86 size: 1/1 | x86 ip: 0

Command < POP: 6 > | Native/x86 size: 10/1 | x86 ip: 0
Checksum: 64
	+Using register, its id: 2

Command < POP: 6 > | Native/x86 size: 10/34 | x86 ip: 0
Checksum: 224
	+Using register, its id: 0
	+Operating width digit, value: 0
--- Adresses to memory

Command < POP: 6 > | Native/x86 size: 10/34 | x86 ip: 0
Checksum: 224
	+Using register, its id: 0
	+Operating width digit, value: 1
--- Adresses to memory

Command < POP: 6 > | Native/x86 size: 10/34 | x86 ip: 0
Checksum: 224
	+Using register, its id: 0
	+Operating width digit, value: 2
--- Adresses to memory

Command < PUSH: 1 > | Native/x86 size: 10/1 | x86 ip: 0
Checksum: 64
	+Using register, its id: 2

Command < PUSH: 1 > | Native/x86 size: 10/34 | x86 ip: 0
Checksum: 224
	+Using register, its id: 0
	+Operating width digit, value: 1
--- Adresses to memory

Command < PUSH: 1 > | Native/x86 size: 10/11 | x86 ip: 0
Checksum: 32
	+Operating width digit, value: 1

Command < ADD: 3 > | Native/x86 size: 1/26 | x86 ip: 0

Command < POP: 6 > | Native/x86 size: 10/34 | x86 ip: 0
Checksum: 224
	+Using register, its id: 0
	+Operating width digit, value: 1
--- Adresses to memory

Command < PUSH: 1 > | Native/x86 size: 10/34 | x86 ip: 0
Checksum: 224
	+Using register, its id: 0
	+Operating width digit, value: 2
--- Adresses to memory

Command < PUSH: 1 > | Native/x86 size: 10/34 | x86 ip: 0
Checksum: 224
	+Using register, its id: 0
	+Operating width digit, value: 1
--- Adresses to memory

Command < MUL: 2 > | Native/x86 size: 1/26 | x86 ip: 0

Command < POP: 6 > | Native/x86 size: 10/34 | x86 ip: 0
Checksum: 224
	+Using register, its id: 0
	+Operating width digit, value: 2
--- Adresses to memory

Command < PUSH: 1 > | Native/x86 size: 10/11 | x86 ip: 0
Checksum: 32
	+Operating width digit, value: 123

Command < POP: 6 > | Native/x86 size: 10/34 | x86 ip: 0
Checksum: 224
	+Using register, its id: 0
	+Operating width digit, value: 3
--- Adresses to memory

Command < PUSH: 1 > | Native/x86 size: 10/34 | x86 ip: 0
Checksum: 224
	+Using register, its id: 0
	+Operating width digit, value: 1
--- Adresses to memory

Command < PUSH: 1 > | Native/x86 size: 10/34 | x86 ip: 0
Checksum: 224
	+Using register, its id: 0
	+Operating width digit, value: 0
--- Adresses to memory

Command < JNE: 15 > | Native/x86 size: 10/26 | x86 ip: 0
	Yeah, it is jump
	+Wants to jump into 446

Command < POP: 6 > | Native/x86 size: 10/1 | x86 ip: 0
Checksum: 64
	+Using register, its id: 2

Command < PUSH: 1 > | Native/x86 size: 10/34 | x86 ip: 0
Checksum: 224
	+Using register, its id: 0
	+Operating width digit, value: 2
--- Adresses to memory

Command < PUSH: 1 > | Native/x86 size: 10/1 | x86 ip: 0
Checksum: 64
	+Using register, its id: 2

Command < RET: 18 > | Native/x86 size: 1/1 | x86 ip: 0

Command < JMP: 9 > | Native/x86 size: 10/5 | x86 ip: 0
	Yeah, it is jump
	+Wants to jump into 558

Command < PUSH: 1 > | Native/x86 size: 10/34 | x86 ip: 0
Checksum: 224
	+Using register, its id: 0
	+Operating width digit, value: 2
--- Adresses to memory

Command < PUSH: 1 > | Native/x86 size: 10/34 | x86 ip: 0
Checksum: 224
	+Using register, its id: 0
	+Operating width digit, value: 1
--- Adresses to memory

Command < PUSH: 1 > | Native/x86 size: 10/34 | x86 ip: 0
Checksum: 224
	+Using register, its id: 0
	+Operating width digit, value: 0
--- Adresses to memory

Command < PUSH: 1 > | Native/x86 size: 10/11 | x86 ip: 0
Checksum: 32
	+Operating width digit, value: 5

Command < PUSH: 1 > | Native/x86 size: 10/1 | x86 ip: 0
Checksum: 64
	+Using register, its id: 0

Command < ADD: 3 > | Native/x86 size: 1/26 | x86 ip: 0

Command < POP: 6 > | Native/x86 size: 10/1 | x86 ip: 0
Checksum: 64
	+Using register, its id: 0

Command < CALL: 17 > | Native/x86 size: 10/5 | x86 ip: 0
	Yeah, it is jump
	+Wants to jump into 243

Command < PUSH: 1 > | Native/x86 size: 10/11 | x86 ip: 0
Checksum: 32
	+Operating width digit, value: 5

Command < PUSH: 1 > | Native/x86 size: 10/1 | x86 ip: 0
Checksum: 64
	+Using register, its id: 0

Command < SUB: 4 > | Native/x86 size: 1/26 | x86 ip: 0

Command < POP: 6 > | Native/x86 size: 10/1 | x86 ip: 0
Checksum: 64
	+Using register, its id: 0

Command < POP: 6 > | Native/x86 size: 10/34 | x86 ip: 0
Checksum: 224
	+Using register, its id: 0
	+Operating width digit, value: 2
--- Adresses to memory

Command < POP: 6 > | Native/x86 size: 10/1 | x86 ip: 0
Checksum: 64
	+Using register, its id: 2

Command < PUSH: 1 > | Native/x86 size: 10/34 | x86 ip: 0
Checksum: 224
	+Using register, its id: 0
	+Operating width digit, value: 2
--- Adresses to memory

Command < PUSH: 1 > | Native/x86 size: 10/1 | x86 ip: 0
Checksum: 64
	+Using register, its id: 2

Command < RET: 18 > | Native/x86 size: 1/1 | x86 ip: 0

================ End of struct dump ==================

Optimization attempt: mov r?x, num
Optimization attempt: mov r?x, num
Optimization attempt: mov r?x, num
Optimization attempt: mov r?x, num
Optimization attempt: constant arithmetics
Optimization attempt: mov r?x, num
Optimization attempt: constant arithmetics
Optimization attempt: mov r?x, num
Optimization attempt: constant arithmetics
Optimization attempt: constant arithmetics
Optimization attempt: mov r?x, num
Optimization attempt: mov r?x, num
Optimization attempt: constant arithmetics
Optimization attempt: mov r?x, num
Optimization attempt: constant arithmetics


---------- Filling labels --------

	Yeah, it is jump
 0: Trying to find x86 ip for ip 19:
	 Found, x86 ip is 12
	Yeah, it is jump
17: Trying to find x86 ip for ip 243:
	 Found, x86 ip is 446
	Yeah, it is jump
45: Trying to find x86 ip for ip 446:
	 Found, x86 ip is 964
	Yeah, it is jump
50: Trying to find x86 ip for ip 558:
	 Found, x86 ip is 1183
	Yeah, it is jump
58: Trying to find x86 ip for ip 243:
	 Found, x86 ip is 446


---------- End filling labels --------


================ Begin of struct dump ==================

Command < CALL: 17 > | Native/x86 size: 10/5 | x86 ip: 0
	Yeah, it is jump
	+Wants to jump into 12

Command < HLT: 0 > | Native/x86 size: 1/7 | x86 ip: 5

Command < POP: 6 > | Native/x86 size: 10/1 | x86 ip: 12
Checksum: 64
	+Using register, its id: 2

Command < PUSH: 1 > | Native/x86 size: 10/1 | x86 ip: 13
Checksum: 64
	+Using register, its id: 2

Command < PUSH: 1 > | Native/x86 size: 10/11 | x86 ip: 14
Checksum: 32
	+Operating width digit, value: 1

Command < POP: 6 > | Native/x86 size: 10/34 | x86 ip: 25
Checksum: 224
	+Using register, its id: 0
	+Operating width digit, value: 0
--- Adresses to memory

Command < PUSH: 1 > | Native/x86 size: 10/11 | x86 ip: 59
Checksum: 32
	+Operating width digit, value: 1

Command < POP: 6 > | Native/x86 size: 10/34 | x86 ip: 70
Checksum: 224
	+Using register, its id: 0
	+Operating width digit, value: 1
--- Adresses to memory

Command < PUSH: 1 > | Native/x86 size: 10/11 | x86 ip: 104
Checksum: 32
	+Operating width digit, value: 5

Command < POP: 6 > | Native/x86 size: 10/34 | x86 ip: 115
Checksum: 224
	+Using register, its id: 0
	+Operating width digit, value: 2
--- Adresses to memory

Command < PUSH: 1 > | Native/x86 size: 10/34 | x86 ip: 149
Checksum: 224
	+Using register, its id: 0
	+Operating width digit, value: 0
--- Adresses to memory

Command < PUSH: 1 > | Native/x86 size: 10/34 | x86 ip: 183
Checksum: 224
	+Using register, its id: 0
	+Operating width digit, value: 1
--- Adresses to memory

Command < PUSH: 1 > | Native/x86 size: 10/34 | x86 ip: 217
Checksum: 224
	+Using register, its id: 0
	+Operating width digit, value: 2
--- Adresses to memory

Command < PUSH: 1 > | Native/x86 size: 10/11 | x86 ip: 251
Checksum: 32
	+Operating width digit, value: 4

Command < PUSH: 1 > | Native/x86 size: 10/1 | x86 ip: 262
Checksum: 64
	+Using register, its id: 0

Command < ADD: 3 > | Native/x86 size: 1/26 | x86 ip: 263

Command < POP: 6 > | Native/x86 size: 10/1 | x86 ip: 289
Checksum: 64
	+Using register, its id: 0

Command < CALL: 17 > | Native/x86 size: 10/5 | x86 ip: 290
	Yeah, it is jump
	+Wants to jump into 446

Command < PUSH: 1 > | Native/x86 size: 10/11 | x86 ip: 295
Checksum: 32
	+Operating width digit, value: 4

Command < PUSH: 1 > | Native/x86 size: 10/1 | x86 ip: 306
Checksum: 64
	+Using register, its id: 0

Command < SUB: 4 > | Native/x86 size: 1/26 | x86 ip: 307

Command < POP: 6 > | Native/x86 size: 10/1 | x86 ip: 333
Checksum: 64
	+Using register, its id: 0

Command < POP: 6 > | Native/x86 size: 10/34 | x86 ip: 334
Checksum: 224
	+Using register, its id: 0
	+Operating width digit, value: 0
--- Adresses to memory

Command < PUSH: 1 > | Native/x86 size: 10/34 | x86 ip: 368
Checksum: 224
	+Using register, its id: 0
	+Operating width digit, value: 0
--- Adresses to memory

Command < OUT: 7 > | Native/x86 size: 1/41 | x86 ip: 402

Command < POP: 6 > | Native/x86 size: 10/1 | x86 ip: 443
Checksum: 64
	+Using register, its id: 2

Command < PUSH: 1 > | Native/x86 size: 10/1 | x86 ip: 444
Checksum: 64
	+Using register, its id: 2

Command < RET: 18 > | Native/x86 size: 1/1 | x86 ip: 445

Command < POP: 6 > | Native/x86 size: 10/1 | x86 ip: 446
Checksum: 64
	+Using register, its id: 2

Command < POP: 6 > | Native/x86 size: 10/34 | x86 ip: 447
Checksum: 224
	+Using register, its id: 0
	+Operating width digit, value: 0
--- Adresses to memory

Command < POP: 6 > | Native/x86 size: 10/34 | x86 ip: 481
Checksum: 224
	+Using register, its id: 0
	+Operating width digit, value: 1
--- Adresses to memory

Command < POP: 6 > | Native/x86 size: 10/34 | x86 ip: 515
Checksum: 224
	+Using register, its id: 0
	+Operating width digit, value: 2
--- Adresses to memory

Command < PUSH: 1 > | Native/x86 size: 10/1 | x86 ip: 549
Checksum: 64
	+Using register, its id: 2

Command < PUSH: 1 > | Native/x86 size: 10/34 | x86 ip: 550
Checksum: 224
	+Using register, its id: 0
	+Operating width digit, value: 1
--- Adresses to memory

Command < PUSH: 1 > | Native/x86 size: 10/11 | x86 ip: 584
Checksum: 32
	+Operating width digit, value: 1

Command < ADD: 3 > | Native/x86 size: 1/26 | x86 ip: 595

Command < POP: 6 > | Native/x86 size: 10/34 | x86 ip: 621
Checksum: 224
	+Using register, its id: 0
	+Operating width digit, value: 1
--- Adresses to memory

Command < PUSH: 1 > | Native/x86 size: 10/34 | x86 ip: 655
Checksum: 224
	+Using register, its id: 0
	+Operating width digit, value: 2
--- Adresses to memory

Command < PUSH: 1 > | Native/x86 size: 10/34 | x86 ip: 689
Checksum: 224
	+Using register, its id: 0
	+Operating width digit, value: 1
--- Adresses to memory

Command < MUL: 2 > | Native/x86 size: 1/26 | x86 ip: 723

Command < POP: 6 > | Native/x86 size: 10/34 | x86 ip: 749
Checksum: 224
	+Using register, its id: 0
	+Operating width digit, value: 2
--- Adresses to memory

Command < PUSH: 1 > | Native/x86 size: 10/11 | x86 ip: 783
Checksum: 32
	+Operating width digit, value: 123

Command < POP: 6 > | Native/x86 size: 10/34 | x86 ip: 794
Checksum: 224
	+Using register, its id: 0
	+Operating width digit, value: 3
--- Adresses to memory

Command < PUSH: 1 > | Native/x86 size: 10/34 | x86 ip: 828
Checksum: 224
	+Using register, its id: 0
	+Operating width digit, value: 1
--- Adresses to memory

Command < PUSH: 1 > | Native/x86 size: 10/34 | x86 ip: 862
Checksum: 224
	+Using register, its id: 0
	+Operating width digit, value: 0
--- Adresses to memory

Command < JNE: 15 > | Native/x86 size: 10/26 | x86 ip: 896
	Yeah, it is jump
	+Wants to jump into 964

Command < POP: 6 > | Native/x86 size: 10/1 | x86 ip: 922
Checksum: 64
	+Using register, its id: 2

Command < PUSH: 1 > | Native/x86 size: 10/34 | x86 ip: 923
Checksum: 224
	+Using register, its id: 0
	+Operating width digit, value: 2
--- Adresses to memory

Command < PUSH: 1 > | Native/x86 size: 10/1 | x86 ip: 957
Checksum: 64
	+Using register, its id: 2

Command < RET: 18 > | Native/x86 size: 1/1 | x86 ip: 958

Command < JMP: 9 > | Native/x86 size: 10/5 | x86 ip: 959
	Yeah, it is jump
	+Wants to jump into 1183

Command < PUSH: 1 > | Native/x86 size: 10/34 | x86 ip: 964
Checksum: 224
	+Using register, its id: 0
	+Operating width digit, value: 2
--- Adresses to memory

Command < PUSH: 1 > | Native/x86 size: 10/34 | x86 ip: 998
Checksum: 224
	+Using register, its id: 0
	+Operating width digit, value: 1
--- Adresses to memory

Command < PUSH: 1 > | Native/x86 size: 10/34 | x86 ip: 1032
Checksum: 224
	+Using register, its id: 0
	+Operating width digit, value: 0
--- Adresses to memory

Command < PUSH: 1 > | Native/x86 size: 10/11 | x86 ip: 1066
Checksum: 32
	+Operating width digit, value: 5

Command < PUSH: 1 > | Native/x86 size: 10/1 | x86 ip: 1077
Checksum: 64
	+Using register, its id: 0

Command < ADD: 3 > | Native/x86 size: 1/26 | x86 ip: 1078

Command < POP: 6 > | Native/x86 size: 10/1 | x86 ip: 1104
Checksum: 64
	+Using register, its id: 0

Command < CALL: 17 > | Native/x86 size: 10/5 | x86 ip: 1105
	Yeah, it is jump
	+Wants to jump into 446

Command < PUSH: 1 > | Native/x86 size: 10/11 | x86 ip: 1110
Checksum: 32
	+Operating width digit, value: 5

Command < PUSH: 1 > | Native/x86 size: 10/1 | x86 ip: 1121
Checksum: 64
	+Using register, its id: 0

Command < SUB: 4 > | Native/x86 size: 1/26 | x86 ip: 1122

Command < POP: 6 > | Native/x86 size: 10/1 | x86 ip: 1148
Checksum: 64
	+Using register, its id: 0

Command < POP: 6 > | Native/x86 size: 10/34 | x86 ip: 1149
Checksum: 224
	+Using register, its id: 0
	+Operating width digit, value: 2
--- Adresses to memory

Command < POP: 6 > | Native/x86 size: 10/1 | x86 ip: 1183
Checksum: 64
	+Using register, its id: 2

Command < PUSH: 1 > | Native/x86 size: 10/34 | x86 ip: 1184
Checksum: 224
	+Using register, its id: 0
	+Operating width digit, value: 2
--- Adresses to memory

Command < PUSH: 1 > | Native/x86 size: 10/1 | x86 ip: 1218
Checksum: 64
	+Using register, its id: 2

Command < RET: 18 > | Native/x86 size: 1/1 | x86 ip: 1219

================ End of struct dump ==================

---------- Begin translation -------------

##########
	 0: 49 ba 
##########

Translating Jump or Call
##########
	 0: e8 
##########

Translating exit()

##########
	 0: 6a 3c 58 31 ff 0f 05 
##########

12:Push/Pop REG

##########
	 0: 5a 
##########

13:Push/Pop REG

##########
	 0: 52 
##########

<14>:Push IMM

##########
	 0: 48 be 
##########


##########
	 0: 56 
##########

Translating push ram

##########
	 0: 50 
##########


##########
	 0: f2 0f 10 44 24 00 
##########


##########
	 0: 48 83 c4 08 
##########


##########
	 0: f2 48 0f 2d f0 
##########


##########
	 0: 48 c1 e6 03 
##########


##########
	 0: 49 01 f2 
##########


##########
	 0: 5f 
##########


##########
	 0: 49 89 ba 
##########


##########
	 0: 49 29 f2 
##########

<59>:Push IMM

##########
	 0: 48 be 
##########


##########
	 0: 56 
##########

Translating push ram

##########
	 0: 50 
##########


##########
	 0: f2 0f 10 44 24 00 
##########


##########
	 0: 48 83 c4 08 
##########


##########
	 0: f2 48 0f 2d f0 
##########


##########
	 0: 48 c1 e6 03 
##########


##########
	 0: 49 01 f2 
##########


##########
	 0: 5f 
##########


##########
	 0: 49 89 ba 
##########


##########
	 0: 49 29 f2 
##########

<104>:Push IMM

##########
	 0: 48 be 
##########


##########
	 0: 56 
##########

Translating push ram

##########
	 0: 50 
##########


##########
	 0: f2 0f 10 44 24 00 
##########


##########
	 0: 48 83 c4 08 
##########


##########
	 0: f2 48 0f 2d f0 
##########


##########
	 0: 48 c1 e6 03 
##########


##########
	 0: 49 01 f2 
##########


##########
	 0: 5f 
##########


##########
	 0: 49 89 ba 
##########


##########
	 0: 49 29 f2 
##########

Translating push ram

##########
	 0: 50 
##########


##########
	 0: f2 0f 10 44 24 00 
##########


##########
	 0: 48 83 c4 08 
##########


##########
	 0: f2 48 0f 2d f0 
##########


##########
	 0: 48 c1 e6 03 
##########


##########
	 0: 49 01 f2 
##########


##########
	 0: 49 8b ba 
##########


##########
	 0: 57 
##########


##########
	 0: 49 29 f2 
##########

Translating push ram

##########
	 0: 50 
##########


##########
	 0: f2 0f 10 44 24 00 
##########


##########
	 0: 48 83 c4 08 
##########


##########
	 0: f2 48 0f 2d f0 
##########


##########
	 0: 48 c1 e6 03 
##########


##########
	 0: 49 01 f2 
##########


##########
	 0: 49 8b ba 
##########


##########
	 0: 57 
##########


##########
	 0: 49 29 f2 
##########

Translating push ram

##########
	 0: 50 
##########


##########
	 0: f2 0f 10 44 24 00 
##########


##########
	 0: 48 83 c4 08 
##########


##########
	 0: f2 48 0f 2d f0 
##########


##########
	 0: 48 c1 e6 03 
##########


##########
	 0: 49 01 f2 
##########


##########
	 0: 49 8b ba 
##########


##########
	 0: 57 
##########


##########
	 0: 49 29 f2 
##########

<251>:Push IMM

##########
	 0: 48 be 
##########


##########
	 0: 56 
##########

262:Push/Pop REG

##########
	 0: 50 
##########

15: Translating math

##########
	 0: f2 0f 10 44 24 00 
##########


##########
	 0: f2 0f 10 4c 24 08 
##########


##########
	 0: 48 83 c4 08 
##########


##########
	 0: f2 0f 58 c1 
##########


##########
	 0: f2 0f 11 44 24 00 
##########

289:Push/Pop REG

##########
	 0: 58 
##########

Translating Jump or Call
##########
	 0: e8 
##########

<295>:Push IMM

##########
	 0: 48 be 
##########


##########
	 0: 56 
##########

306:Push/Pop REG

##########
	 0: 50 
##########

20: Translating math

##########
	 0: f2 0f 10 44 24 00 
##########


##########
	 0: f2 0f 10 4c 24 08 
##########


##########
	 0: 48 83 c4 08 
##########


##########
	 0: f2 0f 5c c1 
##########


##########
	 0: f2 0f 11 44 24 00 
##########

333:Push/Pop REG

##########
	 0: 58 
##########

Translating push ram

##########
	 0: 50 
##########


##########
	 0: f2 0f 10 44 24 00 
##########


##########
	 0: 48 83 c4 08 
##########


##########
	 0: f2 48 0f 2d f0 
##########


##########
	 0: 48 c1 e6 03 
##########


##########
	 0: 49 01 f2 
##########


##########
	 0: 5f 
##########


##########
	 0: 49 89 ba 
##########


##########
	 0: 49 29 f2 
##########

Translating push ram

##########
	 0: 50 
##########


##########
	 0: f2 0f 10 44 24 00 
##########


##########
	 0: 48 83 c4 08 
##########


##########
	 0: f2 48 0f 2d f0 
##########


##########
	 0: 48 c1 e6 03 
##########


##########
	 0: 49 01 f2 
##########


##########
	 0: 49 8b ba 
##########


##########
	 0: 57 
##########


##########
	 0: 49 29 f2 
##########

Translating OUT
##########
	 0: f2 0f 10 44 24 00 
##########


##########
	 0: f2 48 0f 2d f0 
##########


##########
	 0: 56 
##########


##########
	 0: 58 
##########


##########
	 0: 41 52 53 52 51 50 
##########


##########
	 0: 49 89 e4 
##########


##########
	 0: 48 83 e4 f0 
##########


##########
	 0: e8 
##########


##########
	 0: 4c 89 e4 
##########


##########
	 0: 58 59 5a 5b 41 5a 
##########


##########
	 0: 5f 
##########

443:Push/Pop REG

##########
	 0: 5a 
##########

444:Push/Pop REG

##########
	 0: 52 
##########

Translating RET
##########
	 0: c3 
##########

446:Push/Pop REG

##########
	 0: 5a 
##########

Translating push ram

##########
	 0: 50 
##########


##########
	 0: f2 0f 10 44 24 00 
##########


##########
	 0: 48 83 c4 08 
##########


##########
	 0: f2 48 0f 2d f0 
##########


##########
	 0: 48 c1 e6 03 
##########


##########
	 0: 49 01 f2 
##########


##########
	 0: 5f 
##########


##########
	 0: 49 89 ba 
##########


##########
	 0: 49 29 f2 
##########

Translating push ram

##########
	 0: 50 
##########


##########
	 0: f2 0f 10 44 24 00 
##########


##########
	 0: 48 83 c4 08 
##########


##########
	 0: f2 48 0f 2d f0 
##########


##########
	 0: 48 c1 e6 03 
##########


##########
	 0: 49 01 f2 
##########


##########
	 0: 5f 
##########


##########
	 0: 49 89 ba 
##########


##########
	 0: 49 29 f2 
##########

Translating push ram

##########
	 0: 50 
##########


##########
	 0: f2 0f 10 44 24 00 
##########


##########
	 0: 48 83 c4 08 
##########


##########
	 0: f2 48 0f 2d f0 
##########


##########
	 0: 48 c1 e6 03 
##########


##########
	 0: 49 01 f2 
##########


##########
	 0: 5f 
##########


##########
	 0: 49 89 ba 
##########


##########
	 0: 49 29 f2 
##########

549:Push/Pop REG

##########
	 0: 52 
##########

Translating push ram

##########
	 0: 50 
##########


##########
	 0: f2 0f 10 44 24 00 
##########


##########
	 0: 48 83 c4 08 
##########


##########
	 0: f2 48 0f 2d f0 
##########


##########
	 0: 48 c1 e6 03 
##########


##########
	 0: 49 01 f2 
##########


##########
	 0: 49 8b ba 
##########


##########
	 0: 57 
##########


##########
	 0: 49 29 f2 
##########

<584>:Push IMM

##########
	 0: 48 be 
##########


##########
	 0: 56 
##########

35: Translating math

##########
	 0: f2 0f 10 44 24 00 
##########


##########
	 0: f2 0f 10 4c 24 08 
##########


##########
	 0: 48 83 c4 08 
##########


##########
	 0: f2 0f 58 c1 
##########


##########
	 0: f2 0f 11 44 24 00 
##########

Translating push ram

##########
	 0: 50 
##########


##########
	 0: f2 0f 10 44 24 00 
##########


##########
	 0: 48 83 c4 08 
##########


##########
	 0: f2 48 0f 2d f0 
##########


##########
	 0: 48 c1 e6 03 
##########


##########
	 0: 49 01 f2 
##########


##########
	 0: 5f 
##########


##########
	 0: 49 89 ba 
##########


##########
	 0: 49 29 f2 
##########

Translating push ram

##########
	 0: 50 
##########


##########
	 0: f2 0f 10 44 24 00 
##########


##########
	 0: 48 83 c4 08 
##########


##########
	 0: f2 48 0f 2d f0 
##########


##########
	 0: 48 c1 e6 03 
##########


##########
	 0: 49 01 f2 
##########


##########
	 0: 49 8b ba 
##########


##########
	 0: 57 
##########


##########
	 0: 49 29 f2 
##########

Translating push ram

##########
	 0: 50 
##########


##########
	 0: f2 0f 10 44 24 00 
##########


##########
	 0: 48 83 c4 08 
##########


##########
	 0: f2 48 0f 2d f0 
##########


##########
	 0: 48 c1 e6 03 
##########


##########
	 0: 49 01 f2 
##########


##########
	 0: 49 8b ba 
##########


##########
	 0: 57 
##########


##########
	 0: 49 29 f2 
##########

39: Translating math

##########
	 0: f2 0f 10 44 24 00 
##########


##########
	 0: f2 0f 10 4c 24 08 
##########


##########
	 0: 48 83 c4 08 
##########


##########
	 0: f2 0f 59 c1 
##########


##########
	 0: f2 0f 11 44 24 00 
##########

Translating push ram

##########
	 0: 50 
##########


##########
	 0: f2 0f 10 44 24 00 
##########


##########
	 0: 48 83 c4 08 
##########


##########
	 0: f2 48 0f 2d f0 
##########


##########
	 0: 48 c1 e6 03 
##########


##########
	 0: 49 01 f2 
##########


##########
	 0: 5f 
##########


##########
	 0: 49 89 ba 
##########


##########
	 0: 49 29 f2 
##########

<783>:Push IMM

##########
	 0: 48 be 
##########


##########
	 0: 56 
##########

Translating push ram

##########
	 0: 50 
##########


##########
	 0: f2 0f 10 44 24 00 
##########


##########
	 0: 48 83 c4 08 
##########


##########
	 0: f2 48 0f 2d f0 
##########


##########
	 0: 48 c1 e6 03 
##########


##########
	 0: 49 01 f2 
##########


##########
	 0: 5f 
##########


##########
	 0: 49 89 ba 
##########


##########
	 0: 49 29 f2 
##########

Translating push ram

##########
	 0: 50 
##########


##########
	 0: f2 0f 10 44 24 00 
##########


##########
	 0: 48 83 c4 08 
##########


##########
	 0: f2 48 0f 2d f0 
##########


##########
	 0: 48 c1 e6 03 
##########


##########
	 0: 49 01 f2 
##########


##########
	 0: 49 8b ba 
##########


##########
	 0: 57 
##########


##########
	 0: 49 29 f2 
##########

Translating push ram

##########
	 0: 50 
##########


##########
	 0: f2 0f 10 44 24 00 
##########


##########
	 0: 48 83 c4 08 
##########


##########
	 0: f2 48 0f 2d f0 
##########


##########
	 0: 48 c1 e6 03 
##########


##########
	 0: 49 01 f2 
##########


##########
	 0: 49 8b ba 
##########


##########
	 0: 57 
##########


##########
	 0: 49 29 f2 
##########

45: Translating jmp

##########
	 0: f2 0f 10 44 24 00 
##########


##########
	 0: f2 0f 10 4c 24 08 
##########


##########
	 0: 48 83 c4 10 
##########


##########
	 0: 66 0f 2e c1 
##########


##########
	 0: 0f 85 
##########

922:Push/Pop REG

##########
	 0: 5a 
##########

Translating push ram

##########
	 0: 50 
##########


##########
	 0: f2 0f 10 44 24 00 
##########


##########
	 0: 48 83 c4 08 
##########


##########
	 0: f2 48 0f 2d f0 
##########


##########
	 0: 48 c1 e6 03 
##########


##########
	 0: 49 01 f2 
##########


##########
	 0: 49 8b ba 
##########


##########
	 0: 57 
##########


##########
	 0: 49 29 f2 
##########

957:Push/Pop REG

##########
	 0: 52 
##########

Translating RET
##########
	 0: c3 
##########

Translating Jump or Call
##########
	 0: e9 
##########

Translating push ram

##########
	 0: 50 
##########


##########
	 0: f2 0f 10 44 24 00 
##########


##########
	 0: 48 83 c4 08 
##########


##########
	 0: f2 48 0f 2d f0 
##########


##########
	 0: 48 c1 e6 03 
##########


##########
	 0: 49 01 f2 
##########


##########
	 0: 49 8b ba 
##########


##########
	 0: 57 
##########


##########
	 0: 49 29 f2 
##########

Translating push ram

##########
	 0: 50 
##########


##########
	 0: f2 0f 10 44 24 00 
##########


##########
	 0: 48 83 c4 08 
##########


##########
	 0: f2 48 0f 2d f0 
##########


##########
	 0: 48 c1 e6 03 
##########


##########
	 0: 49 01 f2 
##########


##########
	 0: 49 8b ba 
##########


##########
	 0: 57 
##########


##########
	 0: 49 29 f2 
##########

Translating push ram

##########
	 0: 50 
##########


##########
	 0: f2 0f 10 44 24 00 
##########


##########
	 0: 48 83 c4 08 
##########


##########
	 0: f2 48 0f 2d f0 
##########


##########
	 0: 48 c1 e6 03 
##########


##########
	 0: 49 01 f2 
##########


##########
	 0: 49 8b ba 
##########


##########
	 0: 57 
##########


##########
	 0: 49 29 f2 
##########

<1066>:Push IMM

##########
	 0: 48 be 
##########


##########
	 0: 56 
##########

1077:Push/Pop REG

##########
	 0: 50 
##########

56: Translating math

##########
	 0: f2 0f 10 44 24 00 
##########


##########
	 0: f2 0f 10 4c 24 08 
##########


##########
	 0: 48 83 c4 08 
##########


##########
	 0: f2 0f 58 c1 
##########


##########
	 0: f2 0f 11 44 24 00 
##########

1104:Push/Pop REG

##########
	 0: 58 
##########

Translating Jump or Call
##########
	 0: e8 
##########

<1110>:Push IMM

##########
	 0: 48 be 
##########


##########
	 0: 56 
##########

1121:Push/Pop REG

##########
	 0: 50 
##########

61: Translating math

##########
	 0: f2 0f 10 44 24 00 
##########


##########
	 0: f2 0f 10 4c 24 08 
##########


##########
	 0: 48 83 c4 08 
##########


##########
	 0: f2 0f 5c c1 
##########


##########
	 0: f2 0f 11 44 24 00 
##########

1148:Push/Pop REG

##########
	 0: 58 
##########

Translating push ram

##########
	 0: 50 
##########


##########
	 0: f2 0f 10 44 24 00 
##########


##########
	 0: 48 83 c4 08 
##########


##########
	 0: f2 48 0f 2d f0 
##########


##########
	 0: 48 c1 e6 03 
##########


##########
	 0: 49 01 f2 
##########


##########
	 0: 5f 
##########


##########
	 0: 49 89 ba 
##########


##########
	 0: 49 29 f2 
##########

1183:Push/Pop REG

##########
	 0: 5a 
##########

Translating push ram

##########
	 0: 50 
##########


##########
	 0: f2 0f 10 44 24 00 
##########


##########
	 0: 48 83 c4 08 
##########


##########
	 0: f2 48 0f 2d f0 
##########


##########
	 0: 48 c1 e6 03 
##########


##########
	 0: 49 01 f2 
##########


##########
	 0: 49 8b ba 
##########


##########
	 0: 57 
##########


##########
	 0: 49 29 f2 
##########

1218:Push/Pop REG

##########
	 0: 52 
##########

Translating RET
##########
	 0: c3 
##########



====== x86 buffer dump begin =======

 0: 49 ba e8 17 40 00 00 00 
 8: 00 00 e8 07 00 00 00 6a 
16: 3c 58 31 ff 0f 05 5a 52 
24: 48 be 00 00 00 00 00 00 
32: f0 3f 56 50 f2 0f 10 44 
40: 24 00 48 83 c4 08 f2 48 
48: 0f 2d f0 48 c1 e6 03 49 
56: 01 f2 5f 49 89 ba 00 00 
64: 00 00 49 29 f2 48 be 00 
72: 00 00 00 00 00 f0 3f 56 
80: 50 f2 0f 10 44 24 00 48 
88: 83 c4 08 f2 48 0f 2d f0 
96: 48 c1 e6 03 49 01 f2 5f 
104: 49 89 ba 08 00 00 00 49 
112: 29 f2 48 be 00 00 00 00 
120: 00 00 14 40 56 50 f2 0f 
128: 10 44 24 00 48 83 c4 08 
136: f2 48 0f 2d f0 48 c1 e6 
144: 03 49 01 f2 5f 49 89 ba 
152: 10 00 00 00 49 29 f2 50 
160: f2 0f 10 44 24 00 48 83 
168: c4 08 f2 48 0f 2d f0 48 
176: c1 e6 03 49 01 f2 49 8b 
184: ba 00 00 00 00 57 49 29 
192: f2 50 f2 0f 10 44 24 00 
200: 48 83 c4 08 f2 48 0f 2d 
208: f0 48 c1 e6 03 49 01 f2 
216: 49 8b ba 08 00 00 00 57 
224: 49 29 f2 50 f2 0f 10 44 
232: 24 00 48 83 c4 08 f2 48 
240: 0f 2d f0 48 c1 e6 03 49 
248: 01 f2 49 8b ba 10 00 00 
256: 00 57 49 29 f2 48 be 00 
264: 00 00 00 00 00 10 40 56 
272: 50 f2 0f 10 44 24 00 f2 
280: 0f 10 4c 24 08 48 83 c4 
288: 08 f2 0f 58 c1 f2 0f 11 
296: 44 24 00 58 e8 97 00 00 
304: 00 48 be 00 00 00 00 00 
312: 00 10 40 56 50 f2 0f 10 
320: 44 24 00 f2 0f 10 4c 24 
328: 08 48 83 c4 08 f2 0f 5c 
336: c1 f2 0f 11 44 24 00 58 
344: 50 f2 0f 10 44 24 00 48 
352: 83 c4 08 f2 48 0f 2d f0 
360: 48 c1 e6 03 49 01 f2 5f 
368: 49 89 ba 00 00 00 00 49 
376: 29 f2 50 f2 0f 10 44 24 
384: 00 48 83 c4 08 f2 48 0f 
392: 2d f0 48 c1 e6 03 49 01 
400: f2 49 8b ba 00 00 00 00 
408: 57 49 29 f2 f2 0f 10 44 
416: 24 00 f2 48 0f 2d f0 56 
424: 58 41 52 53 52 51 50 49 
432: 89 e4 48 83 e4 f0 e8 13 
440: 03 00 00 4c 89 e4 58 59 
448: 5a 5b 41 5a 5f 5a 52 c3 
456: 5a 50 f2 0f 10 44 24 00 
464: 48 83 c4 08 f2 48 0f 2d 
472: f0 48 c1 e6 03 49 01 f2 
480: 5f 49 89 ba 00 00 00 00 
488: 49 29 f2 50 f2 0f 10 44 
496: 24 00 48 83 c4 08 f2 48 
504: 0f 2d f0 48 c1 e6 03 49 
512: 01 f2 5f 49 89 ba 08 00 
520: 00 00 49 29 f2 50 f2 0f 
528: 10 44 24 00 48 83 c4 08 
536: f2 48 0f 2d f0 48 c1 e6 
544: 03 49 01 f2 5f 49 89 ba 
552: 10 00 00 00 49 29 f2 52 
560: 50 f2 0f 10 44 24 00 48 
568: 83 c4 08 f2 48 0f 2d f0 
576: 48 c1 e6 03 49 01 f2 49 
584: 8b ba 08 00 00 00 57 49 
592: 29 f2 48 be 00 00 00 00 
600: 00 00 f0 3f 56 f2 0f 10 
608: 44 24 00 f2 0f 10 4c 24 
616: 08 48 83 c4 08 f2 0f 58 
624: c1 f2 0f 11 44 24 00 50 
632: f2 0f 10 44 24 00 48 83 
640: c4 08 f2 48 0f 2d f0 48 
648: c1 e6 03 49 01 f2 5f 49 
656: 89 ba 08 00 00 00 49 29 
664: f2 50 f2 0f 10 44 24 00 
672: 48 83 c4 08 f2 48 0f 2d 
680: f0 48 c1 e6 03 49 01 f2 
688: 49 8b ba 10 00 00 00 57 
696: 49 29 f2 50 f2 0f 10 44 
704: 24 00 48 83 c4 08 f2 48 
712: 0f 2d f0 48 c1 e6 03 49 
720: 01 f2 49 8b ba 08 00 00 
728: 00 57 49 29 f2 f2 0f 10 
736: 44 24 00 f2 0f 10 4c 24 
744: 08 48 83 c4 08 f2 0f 59 
752: c1 f2 0f 11 44 24 00 50 
760: f2 0f 10 44 24 00 48 83 
768: c4 08 f2 48 0f 2d f0 48 
776: c1 e6 03 49 01 f2 5f 49 
784: 89 ba 10 00 00 00 49 29 
792: f2 48 be 00 00 00 00 00 
800: c0 5e 40 56 50 f2 0f 10 
808: 44 24 00 48 83 c4 08 f2 
816: 48 0f 2d f0 48 c1 e6 03 
824: 49 01 f2 5f 49 89 ba 18 
832: 00 00 00 49 29 f2 50 f2 
840: 0f 10 44 24 00 48 83 c4 
848: 08 f2 48 0f 2d f0 48 c1 
856: e6 03 49 01 f2 49 8b ba 
864: 08 00 00 00 57 49 29 f2 
872: 50 f2 0f 10 44 24 00 48 
880: 83 c4 08 f2 48 0f 2d f0 
888: 48 c1 e6 03 49 01 f2 49 
896: 8b ba 00 00 00 00 57 49 
904: 29 f2 f2 0f 10 44 24 00 
912: f2 0f 10 4c 24 08 48 83 
920: c4 10 66 0f 2e c1 0f 85 
928: 2a 00 00 00 5a 50 f2 0f 
936: 10 44 24 00 48 83 c4 08 
944: f2 48 0f 2d f0 48 c1 e6 
952: 03 49 01 f2 49 8b ba 10 
960: 00 00 00 57 49 29 f2 52 
968: c3 e9 db 00 00 00 50 f2 
976: 0f 10 44 24 00 48 83 c4 
984: 08 f2 48 0f 2d f0 48 c1 
992: e6 03 49 01 f2 49 8b ba 
1000: 10 00 00 00 57 49 29 f2 
1008: 50 f2 0f 10 44 24 00 48 
1016: 83 c4 08 f2 48 0f 2d f0 
1024: 48 c1 e6 03 49 01 f2 49 
1032: 8b ba 08 00 00 00 57 49 
1040: 29 f2 50 f2 0f 10 44 24 
1048: 00 48 83 c4 08 f2 48 0f 
1056: 2d f0 48 c1 e6 03 49 01 
1064: f2 49 8b ba 00 00 00 00 
1072: 57 49 29 f2 48 be 00 00 
1080: 00 00 00 00 14 40 56 50 
1088: f2 0f 10 44 24 00 f2 0f 
1096: 10 4c 24 08 48 83 c4 08 
1104: f2 0f 58 c1 f2 0f 11 44 
1112: 24 00 58 e8 68 fd ff ff 
1120: 48 be 00 00 00 00 00 00 
1128: 14 40 56 50 f2 0f 10 44 
1136: 24 00 f2 0f 10 4c 24 08 
1144: 48 83 c4 08 f2 0f 5c c1 
1152: f2 0f 11 44 24 00 58 50 
1160: f2 0f 10 44 24 00 48 83 
1168: c4 08 f2 48 0f 2d f0 48 
1176: c1 e6 03 49 01 f2 5f 49 
1184: 89 ba 10 00 00 00 49 29 
1192: f2 5a 50 f2 0f 10 44 24 
1200: 00 48 83 c4 08 f2 48 0f 
1208: 2d f0 48 c1 e6 03 49 01 
1216: f2 49 8b ba 10 00 00 00 
1224: 57 49 29 f2 52 c3 00 

====== x86 buffer dump end =======

